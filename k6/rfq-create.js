// k6 Load Test: RFQ Creation Burst Test
// Tests 100 concurrent users creating RFQs over 5 minutes
// Validates: P95 < 400ms, Error rate < 0.5%, No data corruption

import http from 'k6/http';
import { sleep, check } from 'k6';

export const options = {
  vus: 100,
  duration: '5m',
  thresholds: {
    http_req_failed: ['rate<0.005'],        // < 0.5% error rate
    http_req_duration: ['p(95)<400'],       // P95 < 400ms
    http_reqs: ['rate>50'],                 // > 50 RPS throughput
  },
  summaryTrendStats: ['avg', 'min', 'med', 'max', 'p(90)', 'p(95)', 'p(99)', 'count'],
};

// Mock JWT token for testing (replace with actual token)
const BUYER_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYnV5ZXJfMDAxIiwicm9sZSI6ImJ1eWVyIiwiZW1haWwiOiJidXllckB0ZXN0LmNvbSIsImJ1c2luZXNzX2lkIjoiYnVzaW5lc3NfMDAxIiwiZXhwIjoxNzI3MzE2NzIxLCJpYXQiOjE3MjcyMzAzMjF9.fake-signature-for-testing";

const API_BASE = __ENV.API_BASE || 'https://market-launch-4.preview.emergentagent.com';

const categories = ['electronics', 'fashion', 'home_garden', 'machinery', 'automotive'];
const materials = ['Plastic', 'Metal', 'Fabric', 'Ceramic', 'Composite'];
const destinations = [
  'Los Angeles, CA, USA',
  'New York, NY, USA', 
  'Chicago, IL, USA',
  'Houston, TX, USA',
  'Phoenix, AZ, USA'
];

function generateRandomRFQ() {
  const category = categories[Math.floor(Math.random() * categories.length)];
  const material = materials[Math.floor(Math.random() * materials.length)];
  const destination = destinations[Math.floor(Math.random() * destinations.length)];
  const quantity = Math.floor(Math.random() * 9000) + 1000; // 1000-10000
  const targetPrice = (Math.random() * 50 + 5).toFixed(2); // $5-$55
  
  return {
    title: `Load Test RFQ ${__VU}-${__ITER} - ${category} Order`,
    category: category,
    description: `Bulk procurement request for ${quantity} units of ${material.toLowerCase()} ${category} products. Quality certification required. Load testing scenario generated by k6 performance suite.`,
    specifications: {
      material: material,
      dimensions: `${Math.floor(Math.random() * 50 + 10)}cm x ${Math.floor(Math.random() * 30 + 5)}cm`,
      color: ['Black', 'White', 'Blue', 'Red'][Math.floor(Math.random() * 4)],
      certifications: ['CE', 'FCC', 'RoHS'],
      customization: 'Logo printing and custom packaging',
      packaging: 'Individual boxes with protective foam',
      delivery_terms: 'FOB Shanghai',
      payment_terms: '30% deposit, 70% before shipping',
      sample_required: Math.random() > 0.5
    },
    quantity: quantity,
    target_price: parseFloat(targetPrice),
    currency: 'USD',
    deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days
    shipping_destination: destination,
    attachments: []
  };
}

export default function() {
  const rfqData = generateRandomRFQ();
  
  const payload = JSON.stringify(rfqData);
  
  const params = {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${BUYER_TOKEN}`,
      'User-Agent': 'k6-load-test/1.0',
      'X-Test-Run': 'rfq-create-burst'
    },
    timeout: '30s',
  };
  
  // Create RFQ
  const response = http.post(`${API_BASE}/api/b2b/rfq`, payload, params);
  
  // Validate response
  const success = check(response, {
    'RFQ creation successful': (r) => [200, 201, 202].includes(r.status),
    'Response time < 2s': (r) => r.timings.duration < 2000,
    'Response contains RFQ data': (r) => r.json('rfq') !== undefined,
    'No server errors': (r) => !r.status.toString().startsWith('5'),
    'Authentication accepted': (r) => r.status !== 401 && r.status !== 403,
  });
  
  if (!success) {
    console.error(`❌ RFQ creation failed for VU ${__VU}: Status ${response.status}, Body: ${response.body.substring(0, 200)}`);
  } else {
    console.log(`✅ RFQ created successfully by VU ${__VU}: ${response.json('rfq.id') || 'unknown-id'}`);
  }
  
  // Record custom metrics
  if (response.json('rfq')) {
    // Simulate viewing the created RFQ (realistic user behavior)
    sleep(Math.random() * 2 + 0.5); // 0.5-2.5s think time
    
    const rfqId = response.json('rfq.id');
    if (rfqId) {
      const viewResponse = http.get(`${API_BASE}/api/b2b/rfq/${rfqId}`, params);
      check(viewResponse, {
        'RFQ view successful': (r) => r.status === 200,
        'RFQ view fast': (r) => r.timings.duration < 500,
      });
    }
  }
  
  // Random delay to simulate real user behavior
  sleep(Math.random() * 3 + 1); // 1-4 second delay between requests
}

export function handleSummary(data) {
  return {
    'stdout': textSummary(data, { indent: ' ', enableColors: true }),
    'rfq-load-test-results.json': JSON.stringify(data, null, 2),
  };
}

function textSummary(data, options = {}) {
  const indent = options.indent || '';
  const colors = options.enableColors !== false;
  
  let summary = '\n' + indent + '📊 RFQ CREATE LOAD TEST RESULTS\n';
  summary += indent + '=====================================\n\n';
  
  // Test info
  summary += indent + `🎯 Test Configuration:\n`;
  summary += indent + `   • Virtual Users: ${data.options.vus}\n`;
  summary += indent + `   • Duration: ${data.options.duration}\n`;
  summary += indent + `   • Target Error Rate: < 0.5%\n`;
  summary += indent + `   • Target P95 Latency: < 400ms\n\n`;
  
  // Key metrics
  const requests = data.metrics.http_reqs;
  const duration = data.metrics.http_req_duration;
  const failed = data.metrics.http_req_failed;
  
  summary += indent + `📈 Performance Results:\n`;
  if (requests) {
    summary += indent + `   • Total Requests: ${requests.values.count}\n`;
    summary += indent + `   • Requests/sec: ${requests.values.rate.toFixed(2)}\n`;
  }
  
  if (duration) {
    summary += indent + `   • Avg Response Time: ${duration.values.avg.toFixed(2)}ms\n`;
    summary += indent + `   • P95 Response Time: ${duration.values['p(95)'].toFixed(2)}ms\n`;
    summary += indent + `   • P99 Response Time: ${duration.values['p(99)'].toFixed(2)}ms\n`;
  }
  
  if (failed) {
    const errorRate = (failed.values.rate * 100).toFixed(3);
    summary += indent + `   • Error Rate: ${errorRate}%\n`;
  }
  
  // Pass/Fail indicators
  summary += indent + `\n🎯 SLO Compliance:\n`;
  
  const p95Pass = duration && duration.values['p(95)'] < 400;
  const errorPass = failed && failed.values.rate < 0.005;
  const throughputPass = requests && requests.values.rate > 50;
  
  summary += indent + `   • P95 < 400ms: ${p95Pass ? '✅ PASS' : '❌ FAIL'}\n`;
  summary += indent + `   • Error Rate < 0.5%: ${errorPass ? '✅ PASS' : '❌ FAIL'}\n`;
  summary += indent + `   • Throughput > 50 RPS: ${throughputPass ? '✅ PASS' : '❌ FAIL'}\n`;
  
  const overallPass = p95Pass && errorPass && throughputPass;
  summary += indent + `\n🏆 Overall Result: ${overallPass ? '✅ PRODUCTION READY' : '❌ NEEDS OPTIMIZATION'}\n\n`;
  
  return summary;
}