{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./NotificationsEmitterModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":70,"index":147}}],"key":"Cb5A/UwoHsQ/oVPs9GPgQtVh11E=","exportNames":["*"],"imports":1}},{"name":"./utils/mapNotificationResponse","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":148},"end":{"line":3,"column":91,"index":239}}],"key":"JkOfaen2LZL/eo5bIUuRnscMf0c=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"DEFAULT_ACTION_IDENTIFIER\", {\n    enumerable: true,\n    get: function () {\n      return DEFAULT_ACTION_IDENTIFIER;\n    }\n  });\n  exports.addNotificationReceivedListener = addNotificationReceivedListener;\n  exports.addNotificationsDroppedListener = addNotificationsDroppedListener;\n  exports.addNotificationResponseReceivedListener = addNotificationResponseReceivedListener;\n  exports.removeNotificationSubscription = removeNotificationSubscription;\n  exports.getLastNotificationResponseAsync = getLastNotificationResponseAsync;\n  exports.getLastNotificationResponse = getLastNotificationResponse;\n  exports.clearLastNotificationResponseAsync = clearLastNotificationResponseAsync;\n  exports.clearLastNotificationResponse = clearLastNotificationResponse;\n  exports.addNotificationResponseClearedListener = addNotificationResponseClearedListener;\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _NotificationsEmitterModule = require(_dependencyMap[1], \"./NotificationsEmitterModule\");\n  var NotificationsEmitterModule = _interopDefault(_NotificationsEmitterModule);\n  var _utilsMapNotificationResponse = require(_dependencyMap[2], \"./utils/mapNotificationResponse\");\n  // Web uses SyntheticEventEmitter\n  const emitter = new _expoModulesCore.LegacyEventEmitter(NotificationsEmitterModule.default);\n  const didReceiveNotificationEventName = 'onDidReceiveNotification';\n  const didDropNotificationsEventName = 'onNotificationsDeleted';\n  const didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n  const didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\n  // @docsMissing\n  const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n  /**\n   * Listeners registered by this method will be called whenever a notification is received while the app is running.\n   * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Registering a notification listener using a React hook:\n   * ```jsx\n   * import React from 'react';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function App() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n   *       console.log(notification);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationEventName, notification => {\n      const mappedNotification = (0, _utilsMapNotificationResponse.mapNotification)(notification);\n      listener(mappedNotification);\n    });\n  }\n  /**\n   * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n   * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n   * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n   * @param listener A callback function.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @header listen\n   */\n  function addNotificationsDroppedListener(listener) {\n    return emitter.addListener(didDropNotificationsEventName, listener);\n  }\n  /**\n   * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n   * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Register a notification responder listener:\n   * ```jsx\n   * import React from 'react';\n   * import { Linking } from 'react-native';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function Container() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n   *       const url = response.notification.request.content.data.url;\n   *       Linking.openURL(url);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationResponseReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationResponseEventName, response => {\n      const mappedResponse = (0, _utilsMapNotificationResponse.mapNotificationResponse)(response);\n      listener(mappedResponse);\n    });\n  }\n  /**\n   * @deprecated call `remove()` on the subscription object instead.\n   *\n   * Removes a notification subscription returned by an `addNotificationListener` call.\n   * @param subscription A subscription returned by `addNotificationListener` method.\n   * @header listen\n   */\n  function removeNotificationSubscription(subscription) {\n    console.warn('`removeNotificationSubscription` is deprecated. Call `subscription.remove()` instead.');\n    if (typeof subscription?.remove === 'function') {\n      subscription.remove();\n    } else {\n      throw new Error(`removeNotificationSubscription: Provided value is not a subscription: ${subscription}`);\n    }\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  async function getLastNotificationResponseAsync() {\n    return getLastNotificationResponse();\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  function getLastNotificationResponse() {\n    if (!NotificationsEmitterModule.default.getLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'getLastNotificationResponse');\n    }\n    const response = NotificationsEmitterModule.default.getLastNotificationResponse();\n    const mappedResponse = response ? (0, _utilsMapNotificationResponse.mapNotificationResponse)(response) : response;\n    return mappedResponse;\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   * @return A promise that resolves if the native call was successful.\n   */\n  async function clearLastNotificationResponseAsync() {\n    clearLastNotificationResponse();\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   */\n  function clearLastNotificationResponse() {\n    if (!NotificationsEmitterModule.default.clearLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'clearLastNotificationResponse');\n    }\n    NotificationsEmitterModule.default.clearLastNotificationResponse();\n    // Emit event to clear any useLastNotificationResponse hooks, after native call succeeds\n    emitter.emit(didClearNotificationResponseEventName, []);\n  }\n  /**\n   * @hidden\n   */\n  function addNotificationResponseClearedListener(listener) {\n    return emitter.addListener(didClearNotificationResponseEventName, listener);\n  }\n});","lineCount":188,"map":[[12,2,11,0,"Object"],[12,8,11,0],[12,9,11,0,"defineProperty"],[12,23,11,0],[12,24,11,0,"exports"],[12,31,11,0],[13,4,11,0,"enumerable"],[13,14,11,0],[14,4,11,0,"get"],[14,7,11,0],[14,18,11,0,"get"],[14,19,11,0],[15,6,11,0],[15,13,11,0,"DEFAULT_ACTION_IDENTIFIER"],[15,38,11,0],[16,4,11,0],[17,2,11,0],[18,2,36,0,"exports"],[18,9,36,0],[18,10,36,0,"addNotificationReceivedListener"],[18,41,36,0],[18,44,36,0,"addNotificationReceivedListener"],[18,75,36,0],[19,2,50,0,"exports"],[19,9,50,0],[19,10,50,0,"addNotificationsDroppedListener"],[19,41,50,0],[19,44,50,0,"addNotificationsDroppedListener"],[19,75,50,0],[20,2,79,0,"exports"],[20,9,79,0],[20,10,79,0,"addNotificationResponseReceivedListener"],[20,49,79,0],[20,52,79,0,"addNotificationResponseReceivedListener"],[20,91,79,0],[21,2,92,0,"exports"],[21,9,92,0],[21,10,92,0,"removeNotificationSubscription"],[21,40,92,0],[21,43,92,0,"removeNotificationSubscription"],[21,73,92,0],[22,2,108,0,"exports"],[22,9,108,0],[22,10,108,0,"getLastNotificationResponseAsync"],[22,42,108,0],[22,45,108,0,"getLastNotificationResponseAsync"],[22,77,108,0],[23,2,118,0,"exports"],[23,9,118,0],[23,10,118,0,"getLastNotificationResponse"],[23,37,118,0],[23,40,118,0,"getLastNotificationResponse"],[23,67,118,0],[24,2,136,0,"exports"],[24,9,136,0],[24,10,136,0,"clearLastNotificationResponseAsync"],[24,44,136,0],[24,47,136,0,"clearLastNotificationResponseAsync"],[24,81,136,0],[25,2,148,0,"exports"],[25,9,148,0],[25,10,148,0,"clearLastNotificationResponse"],[25,39,148,0],[25,42,148,0,"clearLastNotificationResponse"],[25,71,148,0],[26,2,159,0,"exports"],[26,9,159,0],[26,10,159,0,"addNotificationResponseClearedListener"],[26,48,159,0],[26,51,159,0,"addNotificationResponseClearedListener"],[26,89,159,0],[27,2,1,0],[27,6,1,0,"_expoModulesCore"],[27,22,1,0],[27,25,1,0,"require"],[27,32,1,0],[27,33,1,0,"_dependencyMap"],[27,47,1,0],[28,2,2,0],[28,6,2,0,"_NotificationsEmitterModule"],[28,33,2,0],[28,36,2,0,"require"],[28,43,2,0],[28,44,2,0,"_dependencyMap"],[28,58,2,0],[29,2,2,0],[29,6,2,0,"NotificationsEmitterModule"],[29,32,2,0],[29,35,2,0,"_interopDefault"],[29,50,2,0],[29,51,2,0,"_NotificationsEmitterModule"],[29,78,2,0],[30,2,3,0],[30,6,3,0,"_utilsMapNotificationResponse"],[30,35,3,0],[30,38,3,0,"require"],[30,45,3,0],[30,46,3,0,"_dependencyMap"],[30,60,3,0],[31,2,4,0],[32,2,5,0],[32,8,5,6,"emitter"],[32,15,5,13],[32,18,5,16],[32,22,5,20,"LegacyEventEmitter"],[32,38,5,38],[32,39,5,38,"LegacyEventEmitter"],[32,57,5,38],[32,58,5,39,"NotificationsEmitterModule"],[32,84,5,65],[32,85,5,65,"default"],[32,92,5,65],[32,93,5,66],[33,2,6,0],[33,8,6,6,"didReceiveNotificationEventName"],[33,39,6,37],[33,42,6,40],[33,68,6,66],[34,2,7,0],[34,8,7,6,"didDropNotificationsEventName"],[34,37,7,35],[34,40,7,38],[34,64,7,62],[35,2,8,0],[35,8,8,6,"didReceiveNotificationResponseEventName"],[35,47,8,45],[35,50,8,48],[35,84,8,82],[36,2,9,0],[36,8,9,6,"didClearNotificationResponseEventName"],[36,45,9,43],[36,48,9,46],[36,80,9,78],[37,2,10,0],[38,2,11,7],[38,8,11,13,"DEFAULT_ACTION_IDENTIFIER"],[38,33,11,38],[38,36,11,41],[38,80,11,85],[39,2,12,0],[40,0,13,0],[41,0,14,0],[42,0,15,0],[43,0,16,0],[44,0,17,0],[45,0,18,0],[46,0,19,0],[47,0,20,0],[48,0,21,0],[49,0,22,0],[50,0,23,0],[51,0,24,0],[52,0,25,0],[53,0,26,0],[54,0,27,0],[55,0,28,0],[56,0,29,0],[57,0,30,0],[58,0,31,0],[59,0,32,0],[60,0,33,0],[61,0,34,0],[62,0,35,0],[63,2,36,7],[63,11,36,16,"addNotificationReceivedListener"],[63,42,36,47,"addNotificationReceivedListener"],[63,43,36,48,"listener"],[63,51,36,56],[63,53,36,58],[64,4,37,4],[64,11,37,11,"emitter"],[64,18,37,18],[64,19,37,19,"addListener"],[64,30,37,30],[64,31,37,31,"didReceiveNotificationEventName"],[64,62,37,62],[64,64,37,65,"notification"],[64,76,37,77],[64,80,37,82],[65,6,38,8],[65,12,38,14,"mappedNotification"],[65,30,38,32],[65,33,38,35],[65,37,38,35,"mapNotification"],[65,66,38,50],[65,67,38,50,"mapNotification"],[65,82,38,50],[65,84,38,51,"notification"],[65,96,38,63],[65,97,38,64],[66,6,39,8,"listener"],[66,14,39,16],[66,15,39,17,"mappedNotification"],[66,33,39,35],[66,34,39,36],[67,4,40,4],[67,5,40,5],[67,6,40,6],[68,2,41,0],[69,2,42,0],[70,0,43,0],[71,0,44,0],[72,0,45,0],[73,0,46,0],[74,0,47,0],[75,0,48,0],[76,0,49,0],[77,2,50,7],[77,11,50,16,"addNotificationsDroppedListener"],[77,42,50,47,"addNotificationsDroppedListener"],[77,43,50,48,"listener"],[77,51,50,56],[77,53,50,58],[78,4,51,4],[78,11,51,11,"emitter"],[78,18,51,18],[78,19,51,19,"addListener"],[78,30,51,30],[78,31,51,31,"didDropNotificationsEventName"],[78,60,51,60],[78,62,51,62,"listener"],[78,70,51,70],[78,71,51,71],[79,2,52,0],[80,2,53,0],[81,0,54,0],[82,0,55,0],[83,0,56,0],[84,0,57,0],[85,0,58,0],[86,0,59,0],[87,0,60,0],[88,0,61,0],[89,0,62,0],[90,0,63,0],[91,0,64,0],[92,0,65,0],[93,0,66,0],[94,0,67,0],[95,0,68,0],[96,0,69,0],[97,0,70,0],[98,0,71,0],[99,0,72,0],[100,0,73,0],[101,0,74,0],[102,0,75,0],[103,0,76,0],[104,0,77,0],[105,0,78,0],[106,2,79,7],[106,11,79,16,"addNotificationResponseReceivedListener"],[106,50,79,55,"addNotificationResponseReceivedListener"],[106,51,79,56,"listener"],[106,59,79,64],[106,61,79,66],[107,4,80,4],[107,11,80,11,"emitter"],[107,18,80,18],[107,19,80,19,"addListener"],[107,30,80,30],[107,31,80,31,"didReceiveNotificationResponseEventName"],[107,70,80,70],[107,72,80,73,"response"],[107,80,80,81],[107,84,80,86],[108,6,81,8],[108,12,81,14,"mappedResponse"],[108,26,81,28],[108,29,81,31],[108,33,81,31,"mapNotificationResponse"],[108,62,81,54],[108,63,81,54,"mapNotificationResponse"],[108,86,81,54],[108,88,81,55,"response"],[108,96,81,63],[108,97,81,64],[109,6,82,8,"listener"],[109,14,82,16],[109,15,82,17,"mappedResponse"],[109,29,82,31],[109,30,82,32],[110,4,83,4],[110,5,83,5],[110,6,83,6],[111,2,84,0],[112,2,85,0],[113,0,86,0],[114,0,87,0],[115,0,88,0],[116,0,89,0],[117,0,90,0],[118,0,91,0],[119,2,92,7],[119,11,92,16,"removeNotificationSubscription"],[119,41,92,46,"removeNotificationSubscription"],[119,42,92,47,"subscription"],[119,54,92,59],[119,56,92,61],[120,4,93,4,"console"],[120,11,93,11],[120,12,93,12,"warn"],[120,16,93,16],[120,17,93,17],[120,104,93,104],[120,105,93,105],[121,4,94,4],[121,8,94,8],[121,15,94,15,"subscription"],[121,27,94,27],[121,29,94,29,"remove"],[121,35,94,35],[121,40,94,40],[121,50,94,50],[121,52,94,52],[122,6,95,8,"subscription"],[122,18,95,20],[122,19,95,21,"remove"],[122,25,95,27],[122,26,95,28],[122,27,95,29],[123,4,96,4],[123,5,96,5],[123,11,97,9],[124,6,98,8],[124,12,98,14],[124,16,98,18,"Error"],[124,21,98,23],[124,22,98,24],[124,95,98,97,"subscription"],[124,107,98,109],[124,109,98,111],[124,110,98,112],[125,4,99,4],[126,2,100,0],[127,2,101,0],[128,0,102,0],[129,0,103,0],[130,0,104,0],[131,0,105,0],[132,0,106,0],[133,0,107,0],[134,2,108,7],[134,17,108,22,"getLastNotificationResponseAsync"],[134,49,108,54,"getLastNotificationResponseAsync"],[134,50,108,54],[134,52,108,57],[135,4,109,4],[135,11,109,11,"getLastNotificationResponse"],[135,38,109,38],[135,39,109,39],[135,40,109,40],[136,2,110,0],[137,2,111,0],[138,0,112,0],[139,0,113,0],[140,0,114,0],[141,0,115,0],[142,0,116,0],[143,0,117,0],[144,2,118,7],[144,11,118,16,"getLastNotificationResponse"],[144,38,118,43,"getLastNotificationResponse"],[144,39,118,43],[144,41,118,46],[145,4,119,4],[145,8,119,8],[145,9,119,9,"NotificationsEmitterModule"],[145,35,119,35],[145,36,119,35,"default"],[145,43,119,35],[145,44,119,36,"getLastNotificationResponse"],[145,71,119,63],[145,73,119,65],[146,6,120,8],[146,12,120,14],[146,16,120,18,"UnavailabilityError"],[146,32,120,37],[146,33,120,37,"UnavailabilityError"],[146,52,120,37],[146,53,120,38],[146,72,120,57],[146,74,120,59],[146,103,120,88],[146,104,120,89],[147,4,121,4],[148,4,122,4],[148,10,122,10,"response"],[148,18,122,18],[148,21,122,21,"NotificationsEmitterModule"],[148,47,122,47],[148,48,122,47,"default"],[148,55,122,47],[148,56,122,48,"getLastNotificationResponse"],[148,83,122,75],[148,84,122,76],[148,85,122,77],[149,4,123,4],[149,10,123,10,"mappedResponse"],[149,24,123,24],[149,27,123,27,"response"],[149,35,123,35],[149,38,123,38],[149,42,123,38,"mapNotificationResponse"],[149,71,123,61],[149,72,123,61,"mapNotificationResponse"],[149,95,123,61],[149,97,123,62,"response"],[149,105,123,70],[149,106,123,71],[149,109,123,74,"response"],[149,117,123,82],[150,4,124,4],[150,11,124,11,"mappedResponse"],[150,25,124,25],[151,2,125,0],[152,2,126,0],[153,0,127,0],[154,0,128,0],[155,0,129,0],[156,0,130,0],[157,0,131,0],[158,0,132,0],[159,0,133,0],[160,0,134,0],[161,0,135,0],[162,2,136,7],[162,17,136,22,"clearLastNotificationResponseAsync"],[162,51,136,56,"clearLastNotificationResponseAsync"],[162,52,136,56],[162,54,136,59],[163,4,137,4,"clearLastNotificationResponse"],[163,33,137,33],[163,34,137,34],[163,35,137,35],[164,2,138,0],[165,2,139,0],[166,0,140,0],[167,0,141,0],[168,0,142,0],[169,0,143,0],[170,0,144,0],[171,0,145,0],[172,0,146,0],[173,0,147,0],[174,2,148,7],[174,11,148,16,"clearLastNotificationResponse"],[174,40,148,45,"clearLastNotificationResponse"],[174,41,148,45],[174,43,148,48],[175,4,149,4],[175,8,149,8],[175,9,149,9,"NotificationsEmitterModule"],[175,35,149,35],[175,36,149,35,"default"],[175,43,149,35],[175,44,149,36,"clearLastNotificationResponse"],[175,73,149,65],[175,75,149,67],[176,6,150,8],[176,12,150,14],[176,16,150,18,"UnavailabilityError"],[176,32,150,37],[176,33,150,37,"UnavailabilityError"],[176,52,150,37],[176,53,150,38],[176,72,150,57],[176,74,150,59],[176,105,150,90],[176,106,150,91],[177,4,151,4],[178,4,152,4,"NotificationsEmitterModule"],[178,30,152,30],[178,31,152,30,"default"],[178,38,152,30],[178,39,152,31,"clearLastNotificationResponse"],[178,68,152,60],[178,69,152,61],[178,70,152,62],[179,4,153,4],[180,4,154,4,"emitter"],[180,11,154,11],[180,12,154,12,"emit"],[180,16,154,16],[180,17,154,17,"didClearNotificationResponseEventName"],[180,54,154,54],[180,56,154,56],[180,58,154,58],[180,59,154,59],[181,2,155,0],[182,2,156,0],[183,0,157,0],[184,0,158,0],[185,2,159,7],[185,11,159,16,"addNotificationResponseClearedListener"],[185,49,159,54,"addNotificationResponseClearedListener"],[185,50,159,55,"listener"],[185,58,159,63],[185,60,159,65],[186,4,160,4],[186,11,160,11,"emitter"],[186,18,160,18],[186,19,160,19,"addListener"],[186,30,160,30],[186,31,160,31,"didClearNotificationResponseEventName"],[186,68,160,68],[186,70,160,70,"listener"],[186,78,160,78],[186,79,160,79],[187,2,161,0],[188,0,161,1],[188,3]],"functionMap":{"names":["<global>","addNotificationReceivedListener","emitter.addListener$argument_1","addNotificationsDroppedListener","addNotificationResponseReceivedListener","removeNotificationSubscription","getLastNotificationResponseAsync","getLastNotificationResponse","clearLastNotificationResponseAsync","clearLastNotificationResponse","addNotificationResponseClearedListener"],"mappings":"AAA;OCmC;gECC;KDG;CDC;OGS;CHE;OI2B;wEFC;KEG;CJC;OKQ;CLQ;OMQ;CNE;OOQ;CPO;OQW;CRE;OSU;CTO;OUI;CVE"},"hasCjsExports":false},"type":"js/module"}]}