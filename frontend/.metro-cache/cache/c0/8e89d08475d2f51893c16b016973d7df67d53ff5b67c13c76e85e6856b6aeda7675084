{"dependencies":[{"name":"./ranker","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":83,"index":83}}],"key":"BVu+olGeyATzqwbtiY2cJOygqoI=","exportNames":["*"],"imports":1}},{"name":"./bucketing","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":84},"end":{"line":2,"column":52,"index":136}}],"key":"JHsvy84rgwv/s6Qaxif2bfOkKRo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.fetchServerRank = fetchServerRank;\n  exports.selectRanker = selectRanker;\n  exports.applyColdStartBoost = applyColdStartBoost;\n  var _ranker = require(_dependencyMap[0], \"./ranker\");\n  var _bucketing = require(_dependencyMap[1], \"./bucketing\");\n  /**\n   * Ranker Selection System with Server-Side Integration\n   * Handles client-side + server-side ranking with fallback\n   */\n\n  // Server-side ranking integration\n  async function fetchServerRank(userId, limit = 20) {\n    try {\n      const API_URL = process.env.EXPO_PUBLIC_BACKEND_URL || 'http://localhost:8001';\n      const res = await fetch(`${API_URL}/api/rank`, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          limit\n        }),\n        timeout: 5000 // 5 second timeout\n      });\n      if (!res.ok) return null;\n      return await res.json(); // { algo, items:[{story_id,score,creator_id}], ttl }\n    } catch (error) {\n      console.warn('[ranker] Server ranking failed, falling back to client:', error);\n      return null;\n    }\n  }\n  async function selectRanker(stories, userId, context) {\n    // Feature flag check\n    if (!_ranker.RANKER_CONFIG.enabled) {\n      return {\n        stories,\n        algorithm: 'identity',\n        inCanary: false,\n        userId,\n        source: 'client'\n      };\n    }\n\n    // Check if server-side ranking is preferred\n    const useServerRanking = process.env.EXPO_PUBLIC_USE_SERVER_RANKING === \"1\";\n    if (useServerRanking) {\n      // Try server-side ranking first\n      const serverResult = await fetchServerRank(userId, stories.length);\n      if (serverResult && serverResult.items) {\n        // Map server results back to story objects\n        const rankedStories = serverResult.items.map(item => stories.find(s => s.id === item.story_id)).filter(Boolean);\n\n        // Add any stories not returned by server (fallback)\n        const serverStoryIds = new Set(serverResult.items.map(item => item.story_id));\n        const remainingStories = stories.filter(s => !serverStoryIds.has(s.id));\n        return {\n          stories: [...rankedStories, ...remainingStories],\n          algorithm: serverResult.algo,\n          inCanary: serverResult.algo === 'ucb1',\n          userId,\n          source: 'server'\n        };\n      }\n\n      // Server failed, fall back to client-side\n      console.warn('[ranker] Server ranking unavailable, using client fallback');\n    }\n\n    // Client-side ranking (existing logic)\n    const assignment = (0, _bucketing.assignRankerTreatment)(userId);\n    let rankedStories;\n    const rankerContext = {\n      ...context,\n      userId,\n      timestamp: Date.now(),\n      businessConstraints: {\n        minCommissionRate: 0.07,\n        maxRepetition: 3,\n        freshnessBoost: 0.1,\n        diversityWeight: 0.2,\n        creatorTierWeights: {\n          gold: 0.1,\n          blue: 0.05,\n          grey: 0.02,\n          unverified: 0\n        }\n      }\n    };\n    switch (assignment.algorithm) {\n      case 'ucb1':\n        rankedStories = (0, _ranker.ucb1Ranker)(stories, rankerContext);\n        break;\n      case 'identity':\n      default:\n        rankedStories = (0, _ranker.ranker)(stories, rankerContext);\n        break;\n    }\n\n    // Apply minimum exposure protection\n    rankedStories = enforceMinExposure(rankedStories, 0.02);\n\n    // Emit assignment for analytics (if tracking available)\n    if (context?.track) {\n      context.track('ranker_assignment', {\n        userId,\n        algorithm: assignment.algorithm,\n        inCanary: assignment.inCanary,\n        source: 'client',\n        storyCount: stories.length,\n        timestamp: Date.now()\n      });\n    }\n    return {\n      stories: rankedStories,\n      algorithm: assignment.algorithm,\n      inCanary: assignment.inCanary,\n      userId,\n      source: 'client'\n    };\n  }\n\n  // Minimum exposure enforcement (anti-starvation)\n  function enforceMinExposure(stories, minPct = 0.02) {\n    if (stories.length <= 10) return stories; // Skip for small sets\n\n    const totalStories = stories.length;\n    const minExposure = Math.max(1, Math.floor(totalStories * minPct));\n\n    // Group by creator\n    const creatorGroups = new Map();\n    stories.forEach(story => {\n      const creatorId = story.creatorId;\n      if (!creatorGroups.has(creatorId)) {\n        creatorGroups.set(creatorId, []);\n      }\n      creatorGroups.get(creatorId).push(story);\n    });\n\n    // Ensure minimum representation for each creator\n    const balanced = [];\n    const remaining = [];\n    creatorGroups.forEach((creatorStories, creatorId) => {\n      const guaranteed = creatorStories.slice(0, Math.min(minExposure, creatorStories.length));\n      const excess = creatorStories.slice(guaranteed.length);\n      balanced.push(...guaranteed);\n      remaining.push(...excess);\n    });\n\n    // Add remaining stories by original rank\n    balanced.push(...remaining);\n    return balanced;\n  }\n\n  // Cold start handling for new stories\n  function applyColdStartBoost(stories) {\n    return stories.map(story => {\n      const engagement = story.engagement || {\n        impressions: 0,\n        ctas: 0,\n        purchases: 0,\n        views: 0\n      };\n\n      // Apply cold start prior if no engagement data\n      if (engagement.views === 0 && engagement.impressions === 0) {\n        return {\n          ...story,\n          metadata: {\n            ...story.metadata,\n            cold_start_prior: 0.02,\n            // 2% prior CTR\n            freshness_boost: 0.05 // Extra freshness for new content\n          }\n        };\n      }\n      return story;\n    });\n  }\n});","lineCount":186,"map":[[7,2,18,0,"exports"],[7,9,18,0],[7,10,18,0,"fetchServerRank"],[7,25,18,0],[7,28,18,0,"fetchServerRank"],[7,43,18,0],[8,2,36,0,"exports"],[8,9,36,0],[8,10,36,0,"selectRanker"],[8,22,36,0],[8,25,36,0,"selectRanker"],[8,37,36,0],[9,2,169,0,"exports"],[9,9,169,0],[9,10,169,0,"applyColdStartBoost"],[9,29,169,0],[9,32,169,0,"applyColdStartBoost"],[9,51,169,0],[10,2,1,0],[10,6,1,0,"_ranker"],[10,13,1,0],[10,16,1,0,"require"],[10,23,1,0],[10,24,1,0,"_dependencyMap"],[10,38,1,0],[11,2,2,0],[11,6,2,0,"_bucketing"],[11,16,2,0],[11,19,2,0,"require"],[11,26,2,0],[11,27,2,0,"_dependencyMap"],[11,41,2,0],[12,2,4,0],[13,0,5,0],[14,0,6,0],[15,0,7,0],[17,2,17,0],[18,2,18,7],[18,17,18,22,"fetchServerRank"],[18,32,18,37,"fetchServerRank"],[18,33,18,38,"userId"],[18,39,18,52],[18,41,18,54,"limit"],[18,46,18,59],[18,49,18,62],[18,51,18,64],[18,53,18,87],[19,4,19,2],[19,8,19,6],[20,6,20,4],[20,12,20,10,"API_URL"],[20,19,20,17],[20,22,20,20,"process"],[20,29,20,27],[20,30,20,28,"env"],[20,33,20,31],[20,34,20,32,"EXPO_PUBLIC_BACKEND_URL"],[20,57,20,55],[20,61,20,59],[20,84,20,82],[21,6,21,4],[21,12,21,10,"res"],[21,15,21,13],[21,18,21,16],[21,24,21,22,"fetch"],[21,29,21,27],[21,30,21,28],[21,33,21,31,"API_URL"],[21,40,21,38],[21,51,21,49],[21,53,21,51],[22,8,22,6,"method"],[22,14,22,12],[22,16,22,14],[22,22,22,20],[23,8,23,6,"headers"],[23,15,23,13],[23,17,23,15],[24,10,23,17],[24,24,23,31],[24,26,23,33],[25,8,23,52],[25,9,23,53],[26,8,24,6,"body"],[26,12,24,10],[26,14,24,12,"JSON"],[26,18,24,16],[26,19,24,17,"stringify"],[26,28,24,26],[26,29,24,27],[27,10,24,29,"user_id"],[27,17,24,36],[27,19,24,38,"userId"],[27,25,24,44],[28,10,24,46,"limit"],[29,8,24,52],[29,9,24,53],[29,10,24,54],[30,8,25,6,"timeout"],[30,15,25,13],[30,17,25,15],[30,21,25,19],[30,22,25,20],[31,6,26,4],[31,7,26,5],[31,8,26,6],[32,6,28,4],[32,10,28,8],[32,11,28,9,"res"],[32,14,28,12],[32,15,28,13,"ok"],[32,17,28,15],[32,19,28,17],[32,26,28,24],[32,30,28,28],[33,6,29,4],[33,13,29,11],[33,19,29,17,"res"],[33,22,29,20],[33,23,29,21,"json"],[33,27,29,25],[33,28,29,26],[33,29,29,27],[33,30,29,28],[33,31,29,29],[34,4,30,2],[34,5,30,3],[34,6,30,4],[34,13,30,11,"error"],[34,18,30,16],[34,20,30,18],[35,6,31,4,"console"],[35,13,31,11],[35,14,31,12,"warn"],[35,18,31,16],[35,19,31,17],[35,76,31,74],[35,78,31,76,"error"],[35,83,31,81],[35,84,31,82],[36,6,32,4],[36,13,32,11],[36,17,32,15],[37,4,33,2],[38,2,34,0],[39,2,36,7],[39,17,36,22,"selectRanker"],[39,29,36,34,"selectRanker"],[39,30,36,35,"stories"],[39,37,36,51],[39,39,36,53,"userId"],[39,45,36,67],[39,47,36,69,"context"],[39,54,36,92],[39,56,36,120],[40,4,37,2],[41,4,38,2],[41,8,38,6],[41,9,38,7,"RANKER_CONFIG"],[41,16,38,20],[41,17,38,20,"RANKER_CONFIG"],[41,30,38,20],[41,31,38,21,"enabled"],[41,38,38,28],[41,40,38,30],[42,6,39,4],[42,13,39,11],[43,8,40,6,"stories"],[43,15,40,13],[44,8,41,6,"algorithm"],[44,17,41,15],[44,19,41,17],[44,29,41,27],[45,8,42,6,"inCanary"],[45,16,42,14],[45,18,42,16],[45,23,42,21],[46,8,43,6,"userId"],[46,14,43,12],[47,8,44,6,"source"],[47,14,44,12],[47,16,44,14],[48,6,45,4],[48,7,45,5],[49,4,46,2],[51,4,48,2],[52,4,49,2],[52,10,49,8,"useServerRanking"],[52,26,49,24],[52,29,49,27,"process"],[52,36,49,34],[52,37,49,35,"env"],[52,40,49,38],[52,41,49,39,"EXPO_PUBLIC_USE_SERVER_RANKING"],[52,71,49,69],[52,76,49,74],[52,79,49,77],[53,4,51,2],[53,8,51,6,"useServerRanking"],[53,24,51,22],[53,26,51,24],[54,6,52,4],[55,6,53,4],[55,12,53,10,"serverResult"],[55,24,53,22],[55,27,53,25],[55,33,53,31,"fetchServerRank"],[55,48,53,46],[55,49,53,47,"userId"],[55,55,53,53],[55,57,53,55,"stories"],[55,64,53,62],[55,65,53,63,"length"],[55,71,53,69],[55,72,53,70],[56,6,54,4],[56,10,54,8,"serverResult"],[56,22,54,20],[56,26,54,24,"serverResult"],[56,38,54,36],[56,39,54,37,"items"],[56,44,54,42],[56,46,54,44],[57,8,55,6],[58,8,56,6],[58,14,56,12,"rankedStories"],[58,27,56,25],[58,30,56,28,"serverResult"],[58,42,56,40],[58,43,56,41,"items"],[58,48,56,46],[58,49,57,9,"map"],[58,52,57,12],[58,53,57,14,"item"],[58,57,57,23],[58,61,57,28,"stories"],[58,68,57,35],[58,69,57,36,"find"],[58,73,57,40],[58,74,57,41,"s"],[58,75,57,42],[58,79,57,46,"s"],[58,80,57,47],[58,81,57,48,"id"],[58,83,57,50],[58,88,57,55,"item"],[58,92,57,59],[58,93,57,60,"story_id"],[58,101,57,68],[58,102,57,69],[58,103,57,70],[58,104,58,9,"filter"],[58,110,58,15],[58,111,58,16,"Boolean"],[58,118,58,23],[58,119,58,35],[60,8,60,6],[61,8,61,6],[61,14,61,12,"serverStoryIds"],[61,28,61,26],[61,31,61,29],[61,35,61,33,"Set"],[61,38,61,36],[61,39,61,37,"serverResult"],[61,51,61,49],[61,52,61,50,"items"],[61,57,61,55],[61,58,61,56,"map"],[61,61,61,59],[61,62,61,61,"item"],[61,66,61,70],[61,70,61,75,"item"],[61,74,61,79],[61,75,61,80,"story_id"],[61,83,61,88],[61,84,61,89],[61,85,61,90],[62,8,62,6],[62,14,62,12,"remainingStories"],[62,30,62,28],[62,33,62,31,"stories"],[62,40,62,38],[62,41,62,39,"filter"],[62,47,62,45],[62,48,62,46,"s"],[62,49,62,47],[62,53,62,51],[62,54,62,52,"serverStoryIds"],[62,68,62,66],[62,69,62,67,"has"],[62,72,62,70],[62,73,62,71,"s"],[62,74,62,72],[62,75,62,73,"id"],[62,77,62,75],[62,78,62,76],[62,79,62,77],[63,8,64,6],[63,15,64,13],[64,10,65,8,"stories"],[64,17,65,15],[64,19,65,17],[64,20,65,18],[64,23,65,21,"rankedStories"],[64,36,65,34],[64,38,65,36],[64,41,65,39,"remainingStories"],[64,57,65,55],[64,58,65,56],[65,10,66,8,"algorithm"],[65,19,66,17],[65,21,66,19,"serverResult"],[65,33,66,31],[65,34,66,32,"algo"],[65,38,66,59],[66,10,67,8,"inCanary"],[66,18,67,16],[66,20,67,18,"serverResult"],[66,32,67,30],[66,33,67,31,"algo"],[66,37,67,35],[66,42,67,40],[66,48,67,46],[67,10,68,8,"userId"],[67,16,68,14],[68,10,69,8,"source"],[68,16,69,14],[68,18,69,16],[69,8,70,6],[69,9,70,7],[70,6,71,4],[72,6,73,4],[73,6,74,4,"console"],[73,13,74,11],[73,14,74,12,"warn"],[73,18,74,16],[73,19,74,17],[73,79,74,77],[73,80,74,78],[74,4,75,2],[76,4,77,2],[77,4,78,2],[77,10,78,8,"assignment"],[77,20,78,18],[77,23,78,21],[77,27,78,21,"assignRankerTreatment"],[77,37,78,42],[77,38,78,42,"assignRankerTreatment"],[77,59,78,42],[77,61,78,43,"userId"],[77,67,78,49],[77,68,78,50],[78,4,80,2],[78,8,80,6,"rankedStories"],[78,21,80,28],[79,4,81,2],[79,10,81,8,"rankerContext"],[79,23,81,21],[79,26,81,24],[80,6,82,4],[80,9,82,7,"context"],[80,16,82,14],[81,6,83,4,"userId"],[81,12,83,10],[82,6,84,4,"timestamp"],[82,15,84,13],[82,17,84,15,"Date"],[82,21,84,19],[82,22,84,20,"now"],[82,25,84,23],[82,26,84,24],[82,27,84,25],[83,6,85,4,"businessConstraints"],[83,25,85,23],[83,27,85,25],[84,8,86,6,"minCommissionRate"],[84,25,86,23],[84,27,86,25],[84,31,86,29],[85,8,87,6,"maxRepetition"],[85,21,87,19],[85,23,87,21],[85,24,87,22],[86,8,88,6,"freshnessBoost"],[86,22,88,20],[86,24,88,22],[86,27,88,25],[87,8,89,6,"diversityWeight"],[87,23,89,21],[87,25,89,23],[87,28,89,26],[88,8,90,6,"creatorTierWeights"],[88,26,90,24],[88,28,90,26],[89,10,91,8,"gold"],[89,14,91,12],[89,16,91,14],[89,19,91,17],[90,10,92,8,"blue"],[90,14,92,12],[90,16,92,14],[90,20,92,18],[91,10,93,8,"grey"],[91,14,93,12],[91,16,93,14],[91,20,93,18],[92,10,94,8,"unverified"],[92,20,94,18],[92,22,94,20],[93,8,95,6],[94,6,96,4],[95,4,97,2],[95,5,97,3],[96,4,99,2],[96,12,99,10,"assignment"],[96,22,99,20],[96,23,99,21,"algorithm"],[96,32,99,30],[97,6,100,4],[97,11,100,9],[97,17,100,15],[98,8,101,6,"rankedStories"],[98,21,101,19],[98,24,101,22],[98,28,101,22,"ucb1Ranker"],[98,35,101,32],[98,36,101,32,"ucb1Ranker"],[98,46,101,32],[98,48,101,33,"stories"],[98,55,101,40],[98,57,101,42,"rankerContext"],[98,70,101,55],[98,71,101,56],[99,8,102,6],[100,6,103,4],[100,11,103,9],[100,21,103,19],[101,6,104,4],[102,8,105,6,"rankedStories"],[102,21,105,19],[102,24,105,22],[102,28,105,22,"ranker"],[102,35,105,28],[102,36,105,28,"ranker"],[102,42,105,28],[102,44,105,29,"stories"],[102,51,105,36],[102,53,105,38,"rankerContext"],[102,66,105,51],[102,67,105,52],[103,8,106,6],[104,4,107,2],[106,4,109,2],[107,4,110,2,"rankedStories"],[107,17,110,15],[107,20,110,18,"enforceMinExposure"],[107,38,110,36],[107,39,110,37,"rankedStories"],[107,52,110,50],[107,54,110,52],[107,58,110,56],[107,59,110,57],[109,4,112,2],[110,4,113,2],[110,8,113,6,"context"],[110,15,113,13],[110,17,113,15,"track"],[110,22,113,20],[110,24,113,22],[111,6,114,4,"context"],[111,13,114,11],[111,14,114,12,"track"],[111,19,114,17],[111,20,114,18],[111,39,114,37],[111,41,114,39],[112,8,115,6,"userId"],[112,14,115,12],[113,8,116,6,"algorithm"],[113,17,116,15],[113,19,116,17,"assignment"],[113,29,116,27],[113,30,116,28,"algorithm"],[113,39,116,37],[114,8,117,6,"inCanary"],[114,16,117,14],[114,18,117,16,"assignment"],[114,28,117,26],[114,29,117,27,"inCanary"],[114,37,117,35],[115,8,118,6,"source"],[115,14,118,12],[115,16,118,14],[115,24,118,22],[116,8,119,6,"storyCount"],[116,18,119,16],[116,20,119,18,"stories"],[116,27,119,25],[116,28,119,26,"length"],[116,34,119,32],[117,8,120,6,"timestamp"],[117,17,120,15],[117,19,120,17,"Date"],[117,23,120,21],[117,24,120,22,"now"],[117,27,120,25],[117,28,120,26],[118,6,121,4],[118,7,121,5],[118,8,121,6],[119,4,122,2],[120,4,124,2],[120,11,124,9],[121,6,125,4,"stories"],[121,13,125,11],[121,15,125,13,"rankedStories"],[121,28,125,26],[122,6,126,4,"algorithm"],[122,15,126,13],[122,17,126,15,"assignment"],[122,27,126,25],[122,28,126,26,"algorithm"],[122,37,126,35],[123,6,127,4,"inCanary"],[123,14,127,12],[123,16,127,14,"assignment"],[123,26,127,24],[123,27,127,25,"inCanary"],[123,35,127,33],[124,6,128,4,"userId"],[124,12,128,10],[125,6,129,4,"source"],[125,12,129,10],[125,14,129,12],[126,4,130,2],[126,5,130,3],[127,2,131,0],[129,2,133,0],[130,2,134,0],[130,11,134,9,"enforceMinExposure"],[130,29,134,27,"enforceMinExposure"],[130,30,134,28,"stories"],[130,37,134,44],[130,39,134,46,"minPct"],[130,45,134,52],[130,48,134,55],[130,52,134,59],[130,54,134,70],[131,4,135,2],[131,8,135,6,"stories"],[131,15,135,13],[131,16,135,14,"length"],[131,22,135,20],[131,26,135,24],[131,28,135,26],[131,30,135,28],[131,37,135,35,"stories"],[131,44,135,42],[131,45,135,43],[131,46,135,44],[133,4,137,2],[133,10,137,8,"totalStories"],[133,22,137,20],[133,25,137,23,"stories"],[133,32,137,30],[133,33,137,31,"length"],[133,39,137,37],[134,4,138,2],[134,10,138,8,"minExposure"],[134,21,138,19],[134,24,138,22,"Math"],[134,28,138,26],[134,29,138,27,"max"],[134,32,138,30],[134,33,138,31],[134,34,138,32],[134,36,138,34,"Math"],[134,40,138,38],[134,41,138,39,"floor"],[134,46,138,44],[134,47,138,45,"totalStories"],[134,59,138,57],[134,62,138,60,"minPct"],[134,68,138,66],[134,69,138,67],[134,70,138,68],[136,4,140,2],[137,4,141,2],[137,10,141,8,"creatorGroups"],[137,23,141,21],[137,26,141,24],[137,30,141,28,"Map"],[137,33,141,31],[137,34,141,49],[137,35,141,50],[138,4,142,2,"stories"],[138,11,142,9],[138,12,142,10,"forEach"],[138,19,142,17],[138,20,142,18,"story"],[138,25,142,23],[138,29,142,27],[139,6,143,4],[139,12,143,10,"creatorId"],[139,21,143,19],[139,24,143,22,"story"],[139,29,143,27],[139,30,143,28,"creatorId"],[139,39,143,37],[140,6,144,4],[140,10,144,8],[140,11,144,9,"creatorGroups"],[140,24,144,22],[140,25,144,23,"has"],[140,28,144,26],[140,29,144,27,"creatorId"],[140,38,144,36],[140,39,144,37],[140,41,144,39],[141,8,145,6,"creatorGroups"],[141,21,145,19],[141,22,145,20,"set"],[141,25,145,23],[141,26,145,24,"creatorId"],[141,35,145,33],[141,37,145,35],[141,39,145,37],[141,40,145,38],[142,6,146,4],[143,6,147,4,"creatorGroups"],[143,19,147,17],[143,20,147,18,"get"],[143,23,147,21],[143,24,147,22,"creatorId"],[143,33,147,31],[143,34,147,32],[143,35,147,34,"push"],[143,39,147,38],[143,40,147,39,"story"],[143,45,147,44],[143,46,147,45],[144,4,148,2],[144,5,148,3],[144,6,148,4],[146,4,150,2],[147,4,151,2],[147,10,151,8,"balanced"],[147,18,151,25],[147,21,151,28],[147,23,151,30],[148,4,152,2],[148,10,152,8,"remaining"],[148,19,152,26],[148,22,152,29],[148,24,152,31],[149,4,154,2,"creatorGroups"],[149,17,154,15],[149,18,154,16,"forEach"],[149,25,154,23],[149,26,154,24],[149,27,154,25,"creatorStories"],[149,41,154,39],[149,43,154,41,"creatorId"],[149,52,154,50],[149,57,154,55],[150,6,155,4],[150,12,155,10,"guaranteed"],[150,22,155,20],[150,25,155,23,"creatorStories"],[150,39,155,37],[150,40,155,38,"slice"],[150,45,155,43],[150,46,155,44],[150,47,155,45],[150,49,155,47,"Math"],[150,53,155,51],[150,54,155,52,"min"],[150,57,155,55],[150,58,155,56,"minExposure"],[150,69,155,67],[150,71,155,69,"creatorStories"],[150,85,155,83],[150,86,155,84,"length"],[150,92,155,90],[150,93,155,91],[150,94,155,92],[151,6,156,4],[151,12,156,10,"excess"],[151,18,156,16],[151,21,156,19,"creatorStories"],[151,35,156,33],[151,36,156,34,"slice"],[151,41,156,39],[151,42,156,40,"guaranteed"],[151,52,156,50],[151,53,156,51,"length"],[151,59,156,57],[151,60,156,58],[152,6,158,4,"balanced"],[152,14,158,12],[152,15,158,13,"push"],[152,19,158,17],[152,20,158,18],[152,23,158,21,"guaranteed"],[152,33,158,31],[152,34,158,32],[153,6,159,4,"remaining"],[153,15,159,13],[153,16,159,14,"push"],[153,20,159,18],[153,21,159,19],[153,24,159,22,"excess"],[153,30,159,28],[153,31,159,29],[154,4,160,2],[154,5,160,3],[154,6,160,4],[156,4,162,2],[157,4,163,2,"balanced"],[157,12,163,10],[157,13,163,11,"push"],[157,17,163,15],[157,18,163,16],[157,21,163,19,"remaining"],[157,30,163,28],[157,31,163,29],[158,4,165,2],[158,11,165,9,"balanced"],[158,19,165,17],[159,2,166,0],[161,2,168,0],[162,2,169,7],[162,11,169,16,"applyColdStartBoost"],[162,30,169,35,"applyColdStartBoost"],[162,31,169,36,"stories"],[162,38,169,52],[162,40,169,63],[163,4,170,2],[163,11,170,9,"stories"],[163,18,170,16],[163,19,170,17,"map"],[163,22,170,20],[163,23,170,21,"story"],[163,28,170,26],[163,32,170,30],[164,6,171,4],[164,12,171,10,"engagement"],[164,22,171,20],[164,25,171,23,"story"],[164,30,171,28],[164,31,171,29,"engagement"],[164,41,171,39],[164,45,171,43],[165,8,171,45,"impressions"],[165,19,171,56],[165,21,171,58],[165,22,171,59],[166,8,171,61,"ctas"],[166,12,171,65],[166,14,171,67],[166,15,171,68],[167,8,171,70,"purchases"],[167,17,171,79],[167,19,171,81],[167,20,171,82],[168,8,171,84,"views"],[168,13,171,89],[168,15,171,91],[169,6,171,93],[169,7,171,94],[171,6,173,4],[172,6,174,4],[172,10,174,8,"engagement"],[172,20,174,18],[172,21,174,19,"views"],[172,26,174,24],[172,31,174,29],[172,32,174,30],[172,36,174,34,"engagement"],[172,46,174,44],[172,47,174,45,"impressions"],[172,58,174,56],[172,63,174,61],[172,64,174,62],[172,66,174,64],[173,8,175,6],[173,15,175,13],[174,10,176,8],[174,13,176,11,"story"],[174,18,176,16],[175,10,177,8,"metadata"],[175,18,177,16],[175,20,177,18],[176,12,178,10],[176,15,178,13,"story"],[176,20,178,18],[176,21,178,19,"metadata"],[176,29,178,27],[177,12,179,10,"cold_start_prior"],[177,28,179,26],[177,30,179,28],[177,34,179,32],[178,12,179,34],[179,12,180,10,"freshness_boost"],[179,27,180,25],[179,29,180,27],[179,33,180,31],[179,34,180,34],[180,10,181,8],[181,8,182,6],[181,9,182,7],[182,6,183,4],[183,6,185,4],[183,13,185,11,"story"],[183,18,185,16],[184,4,186,2],[184,5,186,3],[184,6,186,4],[185,2,187,0],[186,0,187,1],[186,3]],"functionMap":{"names":["<global>","fetchServerRank","selectRanker","serverResult.items.map$argument_0","stories.find$argument_0","stories.filter$argument_0","enforceMinExposure","stories.forEach$argument_0","creatorGroups.forEach$argument_0","applyColdStartBoost","stories.map$argument_0"],"mappings":"AAA;OCiB;CDgB;OEE;aCqB,4BC,2BD,CD;4DCI,4BD;8CGC,8BH;CFqE;AMG;kBCQ;GDM;wBEM;GFM;CNM;OSG;qBCC;GDgB"},"hasCjsExports":false},"type":"js/module"}]}