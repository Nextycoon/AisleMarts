{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"./ranker","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":83,"index":83}}],"key":"BVu+olGeyATzqwbtiY2cJOygqoI=","exportNames":["*"],"imports":1}},{"name":"./bucketing","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":84},"end":{"line":2,"column":52,"index":136}}],"key":"JHsvy84rgwv/s6Qaxif2bfOkKRo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.fetchServerRank = fetchServerRank;\n  exports.selectRanker = selectRanker;\n  exports.applyColdStartBoost = applyColdStartBoost;\n  var _expoVirtualEnv = require(_dependencyMap[0], \"expo/virtual/env\");\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _ranker = require(_dependencyMap[2], \"./ranker\");\n  var _bucketing = require(_dependencyMap[3], \"./bucketing\");\n  /**\n   * Ranker Selection System with Server-Side Integration\n   * Handles client-side + server-side ranking with fallback\n   */\n  // Server-side ranking integration\n  function fetchServerRank(_x) {\n    return _fetchServerRank.apply(this, arguments);\n  }\n  function _fetchServerRank() {\n    _fetchServerRank = (0, _asyncToGenerator.default)(function* (userId) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n      try {\n        var API_URL = _expoVirtualEnv.env.EXPO_PUBLIC_BACKEND_URL || 'http://localhost:8001';\n        var res = yield fetch(`${API_URL}/api/rank`, {\n          method: \"POST\",\n          headers: {\n            \"content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            user_id: userId,\n            limit\n          }),\n          timeout: 5000 // 5 second timeout\n        });\n        if (!res.ok) return null;\n        return yield res.json(); // { algo, items:[{story_id,score,creator_id}], ttl }\n      } catch (error) {\n        console.warn('[ranker] Server ranking failed, falling back to client:', error);\n        return null;\n      }\n    });\n    return _fetchServerRank.apply(this, arguments);\n  }\n  function selectRanker(_x2, _x3, _x4) {\n    return _selectRanker.apply(this, arguments);\n  } // Minimum exposure enforcement (anti-starvation)\n  function _selectRanker() {\n    _selectRanker = (0, _asyncToGenerator.default)(function* (stories, userId, context) {\n      // Feature flag check\n      if (!_ranker.RANKER_CONFIG.enabled) {\n        return {\n          stories,\n          algorithm: 'identity',\n          inCanary: false,\n          userId,\n          source: 'client'\n        };\n      }\n\n      // Check if server-side ranking is preferred\n      var useServerRanking = _expoVirtualEnv.env.EXPO_PUBLIC_USE_SERVER_RANKING === \"1\";\n      if (useServerRanking) {\n        // Try server-side ranking first\n        var serverResult = yield fetchServerRank(userId, stories.length);\n        if (serverResult && serverResult.items) {\n          // Map server results back to story objects\n          var _rankedStories = serverResult.items.map(item => stories.find(s => s.id === item.story_id)).filter(Boolean);\n\n          // Add any stories not returned by server (fallback)\n          var serverStoryIds = new Set(serverResult.items.map(item => item.story_id));\n          var remainingStories = stories.filter(s => !serverStoryIds.has(s.id));\n          return {\n            stories: [..._rankedStories, ...remainingStories],\n            algorithm: serverResult.algo,\n            inCanary: serverResult.algo === 'ucb1',\n            userId,\n            source: 'server'\n          };\n        }\n\n        // Server failed, fall back to client-side\n        console.warn('[ranker] Server ranking unavailable, using client fallback');\n      }\n\n      // Client-side ranking (existing logic)\n      var assignment = (0, _bucketing.assignRankerTreatment)(userId);\n      var rankedStories;\n      var rankerContext = {\n        ...context,\n        userId,\n        timestamp: Date.now(),\n        businessConstraints: {\n          minCommissionRate: 0.07,\n          maxRepetition: 3,\n          freshnessBoost: 0.1,\n          diversityWeight: 0.2,\n          creatorTierWeights: {\n            gold: 0.1,\n            blue: 0.05,\n            grey: 0.02,\n            unverified: 0\n          }\n        }\n      };\n      switch (assignment.algorithm) {\n        case 'ucb1':\n          rankedStories = (0, _ranker.ucb1Ranker)(stories, rankerContext);\n          break;\n        case 'identity':\n        default:\n          rankedStories = (0, _ranker.ranker)(stories, rankerContext);\n          break;\n      }\n\n      // Apply minimum exposure protection\n      rankedStories = enforceMinExposure(rankedStories, 0.02);\n\n      // Emit assignment for analytics (if tracking available)\n      if (context?.track) {\n        context.track('ranker_assignment', {\n          userId,\n          algorithm: assignment.algorithm,\n          inCanary: assignment.inCanary,\n          source: 'client',\n          storyCount: stories.length,\n          timestamp: Date.now()\n        });\n      }\n      return {\n        stories: rankedStories,\n        algorithm: assignment.algorithm,\n        inCanary: assignment.inCanary,\n        userId,\n        source: 'client'\n      };\n    });\n    return _selectRanker.apply(this, arguments);\n  }\n  function enforceMinExposure(stories) {\n    var minPct = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.02;\n    if (stories.length <= 10) return stories; // Skip for small sets\n\n    var totalStories = stories.length;\n    var minExposure = Math.max(1, Math.floor(totalStories * minPct));\n\n    // Group by creator\n    var creatorGroups = new Map();\n    stories.forEach(story => {\n      var creatorId = story.creatorId;\n      if (!creatorGroups.has(creatorId)) {\n        creatorGroups.set(creatorId, []);\n      }\n      creatorGroups.get(creatorId).push(story);\n    });\n\n    // Ensure minimum representation for each creator\n    var balanced = [];\n    var remaining = [];\n    creatorGroups.forEach((creatorStories, creatorId) => {\n      var guaranteed = creatorStories.slice(0, Math.min(minExposure, creatorStories.length));\n      var excess = creatorStories.slice(guaranteed.length);\n      balanced.push(...guaranteed);\n      remaining.push(...excess);\n    });\n\n    // Add remaining stories by original rank\n    balanced.push(...remaining);\n    return balanced;\n  }\n\n  // Cold start handling for new stories\n  function applyColdStartBoost(stories) {\n    return stories.map(story => {\n      var engagement = story.engagement || {\n        impressions: 0,\n        ctas: 0,\n        purchases: 0,\n        views: 0\n      };\n\n      // Apply cold start prior if no engagement data\n      if (engagement.views === 0 && engagement.impressions === 0) {\n        return {\n          ...story,\n          metadata: {\n            ...story.metadata,\n            cold_start_prior: 0.02,\n            // 2% prior CTR\n            freshness_boost: 0.05 // Extra freshness for new content\n          }\n        };\n      }\n      return story;\n    });\n  }\n});","lineCount":205,"map":[[12,2,18,0,"exports"],[12,9,18,0],[12,10,18,0,"fetchServerRank"],[12,25,18,0],[12,28,18,0,"fetchServerRank"],[12,43,18,0],[13,2,36,0,"exports"],[13,9,36,0],[13,10,36,0,"selectRanker"],[13,22,36,0],[13,25,36,0,"selectRanker"],[13,37,36,0],[14,2,169,0,"exports"],[14,9,169,0],[14,10,169,0,"applyColdStartBoost"],[14,29,169,0],[14,32,169,0,"applyColdStartBoost"],[14,51,169,0],[15,2,187,1],[15,6,187,1,"_expoVirtualEnv"],[15,21,187,1],[15,24,187,1,"require"],[15,31,187,1],[15,32,187,1,"_dependencyMap"],[15,46,187,1],[16,2,187,1],[16,6,187,1,"_babelRuntimeHelpersAsyncToGenerator"],[16,42,187,1],[16,45,187,1,"require"],[16,52,187,1],[16,53,187,1,"_dependencyMap"],[16,67,187,1],[17,2,187,1],[17,6,187,1,"_asyncToGenerator"],[17,23,187,1],[17,26,187,1,"_interopDefault"],[17,41,187,1],[17,42,187,1,"_babelRuntimeHelpersAsyncToGenerator"],[17,78,187,1],[18,2,1,0],[18,6,1,0,"_ranker"],[18,13,1,0],[18,16,1,0,"require"],[18,23,1,0],[18,24,1,0,"_dependencyMap"],[18,38,1,0],[19,2,2,0],[19,6,2,0,"_bucketing"],[19,16,2,0],[19,19,2,0,"require"],[19,26,2,0],[19,27,2,0,"_dependencyMap"],[19,41,2,0],[20,2,4,0],[21,0,5,0],[22,0,6,0],[23,0,7,0],[24,2,17,0],[25,2,17,0],[25,11,18,22,"fetchServerRank"],[25,26,18,37,"fetchServerRank"],[25,27,18,37,"_x"],[25,29,18,37],[26,4,18,37],[26,11,18,37,"_fetchServerRank"],[26,27,18,37],[26,28,18,37,"apply"],[26,33,18,37],[26,40,18,37,"arguments"],[26,49,18,37],[27,2,18,37],[28,2,18,37],[28,11,18,37,"_fetchServerRank"],[28,28,18,37],[29,4,18,37,"_fetchServerRank"],[29,20,18,37],[29,27,18,37,"_asyncToGenerator"],[29,44,18,37],[29,45,18,37,"default"],[29,52,18,37],[29,54,18,7],[29,65,18,38,"userId"],[29,71,18,52],[29,73,18,87],[30,6,18,87],[30,10,18,54,"limit"],[30,15,18,59],[30,18,18,59,"arguments"],[30,27,18,59],[30,28,18,59,"length"],[30,34,18,59],[30,42,18,59,"arguments"],[30,51,18,59],[30,59,18,59,"undefined"],[30,68,18,59],[30,71,18,59,"arguments"],[30,80,18,59],[30,86,18,62],[30,88,18,64],[31,6,19,2],[31,10,19,6],[32,8,20,4],[32,12,20,10,"API_URL"],[32,19,20,17],[32,22,20,20,"_expoVirtualEnv"],[32,37,20,20],[32,38,20,20,"env"],[32,41,20,20],[32,42,20,20,"EXPO_PUBLIC_BACKEND_URL"],[32,65,20,20],[32,69,20,59],[32,92,20,82],[33,8,21,4],[33,12,21,10,"res"],[33,15,21,13],[33,24,21,22,"fetch"],[33,29,21,27],[33,30,21,28],[33,33,21,31,"API_URL"],[33,40,21,38],[33,51,21,49],[33,53,21,51],[34,10,22,6,"method"],[34,16,22,12],[34,18,22,14],[34,24,22,20],[35,10,23,6,"headers"],[35,17,23,13],[35,19,23,15],[36,12,23,17],[36,26,23,31],[36,28,23,33],[37,10,23,52],[37,11,23,53],[38,10,24,6,"body"],[38,14,24,10],[38,16,24,12,"JSON"],[38,20,24,16],[38,21,24,17,"stringify"],[38,30,24,26],[38,31,24,27],[39,12,24,29,"user_id"],[39,19,24,36],[39,21,24,38,"userId"],[39,27,24,44],[40,12,24,46,"limit"],[41,10,24,52],[41,11,24,53],[41,12,24,54],[42,10,25,6,"timeout"],[42,17,25,13],[42,19,25,15],[42,23,25,19],[42,24,25,20],[43,8,26,4],[43,9,26,5],[43,10,26,6],[44,8,28,4],[44,12,28,8],[44,13,28,9,"res"],[44,16,28,12],[44,17,28,13,"ok"],[44,19,28,15],[44,21,28,17],[44,28,28,24],[44,32,28,28],[45,8,29,4],[45,21,29,17,"res"],[45,24,29,20],[45,25,29,21,"json"],[45,29,29,25],[45,30,29,26],[45,31,29,27],[45,32,29,28],[45,33,29,29],[46,6,30,2],[46,7,30,3],[46,8,30,4],[46,15,30,11,"error"],[46,20,30,16],[46,22,30,18],[47,8,31,4,"console"],[47,15,31,11],[47,16,31,12,"warn"],[47,20,31,16],[47,21,31,17],[47,78,31,74],[47,80,31,76,"error"],[47,85,31,81],[47,86,31,82],[48,8,32,4],[48,15,32,11],[48,19,32,15],[49,6,33,2],[50,4,34,0],[50,5,34,1],[51,4,34,1],[51,11,34,1,"_fetchServerRank"],[51,27,34,1],[51,28,34,1,"apply"],[51,33,34,1],[51,40,34,1,"arguments"],[51,49,34,1],[52,2,34,1],[53,2,34,1],[53,11,36,22,"selectRanker"],[53,23,36,34,"selectRanker"],[53,24,36,34,"_x2"],[53,27,36,34],[53,29,36,34,"_x3"],[53,32,36,34],[53,34,36,34,"_x4"],[53,37,36,34],[54,4,36,34],[54,11,36,34,"_selectRanker"],[54,24,36,34],[54,25,36,34,"apply"],[54,30,36,34],[54,37,36,34,"arguments"],[54,46,36,34],[55,2,36,34],[55,4,133,0],[56,2,133,0],[56,11,133,0,"_selectRanker"],[56,25,133,0],[57,4,133,0,"_selectRanker"],[57,17,133,0],[57,24,133,0,"_asyncToGenerator"],[57,41,133,0],[57,42,133,0,"default"],[57,49,133,0],[57,51,36,7],[57,62,36,35,"stories"],[57,69,36,51],[57,71,36,53,"userId"],[57,77,36,67],[57,79,36,69,"context"],[57,86,36,92],[57,88,36,120],[58,6,37,2],[59,6,38,2],[59,10,38,6],[59,11,38,7,"RANKER_CONFIG"],[59,18,38,20],[59,19,38,20,"RANKER_CONFIG"],[59,32,38,20],[59,33,38,21,"enabled"],[59,40,38,28],[59,42,38,30],[60,8,39,4],[60,15,39,11],[61,10,40,6,"stories"],[61,17,40,13],[62,10,41,6,"algorithm"],[62,19,41,15],[62,21,41,17],[62,31,41,27],[63,10,42,6,"inCanary"],[63,18,42,14],[63,20,42,16],[63,25,42,21],[64,10,43,6,"userId"],[64,16,43,12],[65,10,44,6,"source"],[65,16,44,12],[65,18,44,14],[66,8,45,4],[66,9,45,5],[67,6,46,2],[69,6,48,2],[70,6,49,2],[70,10,49,8,"useServerRanking"],[70,26,49,24],[70,29,49,27,"_expoVirtualEnv"],[70,44,49,27],[70,45,49,27,"env"],[70,48,49,27],[70,49,49,27,"EXPO_PUBLIC_USE_SERVER_RANKING"],[70,79,49,27],[70,84,49,74],[70,87,49,77],[71,6,51,2],[71,10,51,6,"useServerRanking"],[71,26,51,22],[71,28,51,24],[72,8,52,4],[73,8,53,4],[73,12,53,10,"serverResult"],[73,24,53,22],[73,33,53,31,"fetchServerRank"],[73,48,53,46],[73,49,53,47,"userId"],[73,55,53,53],[73,57,53,55,"stories"],[73,64,53,62],[73,65,53,63,"length"],[73,71,53,69],[73,72,53,70],[74,8,54,4],[74,12,54,8,"serverResult"],[74,24,54,20],[74,28,54,24,"serverResult"],[74,40,54,36],[74,41,54,37,"items"],[74,46,54,42],[74,48,54,44],[75,10,55,6],[76,10,56,6],[76,14,56,12,"rankedStories"],[76,28,56,25],[76,31,56,28,"serverResult"],[76,43,56,40],[76,44,56,41,"items"],[76,49,56,46],[76,50,57,9,"map"],[76,53,57,12],[76,54,57,14,"item"],[76,58,57,23],[76,62,57,28,"stories"],[76,69,57,35],[76,70,57,36,"find"],[76,74,57,40],[76,75,57,41,"s"],[76,76,57,42],[76,80,57,46,"s"],[76,81,57,47],[76,82,57,48,"id"],[76,84,57,50],[76,89,57,55,"item"],[76,93,57,59],[76,94,57,60,"story_id"],[76,102,57,68],[76,103,57,69],[76,104,57,70],[76,105,58,9,"filter"],[76,111,58,15],[76,112,58,16,"Boolean"],[76,119,58,23],[76,120,58,35],[78,10,60,6],[79,10,61,6],[79,14,61,12,"serverStoryIds"],[79,28,61,26],[79,31,61,29],[79,35,61,33,"Set"],[79,38,61,36],[79,39,61,37,"serverResult"],[79,51,61,49],[79,52,61,50,"items"],[79,57,61,55],[79,58,61,56,"map"],[79,61,61,59],[79,62,61,61,"item"],[79,66,61,70],[79,70,61,75,"item"],[79,74,61,79],[79,75,61,80,"story_id"],[79,83,61,88],[79,84,61,89],[79,85,61,90],[80,10,62,6],[80,14,62,12,"remainingStories"],[80,30,62,28],[80,33,62,31,"stories"],[80,40,62,38],[80,41,62,39,"filter"],[80,47,62,45],[80,48,62,46,"s"],[80,49,62,47],[80,53,62,51],[80,54,62,52,"serverStoryIds"],[80,68,62,66],[80,69,62,67,"has"],[80,72,62,70],[80,73,62,71,"s"],[80,74,62,72],[80,75,62,73,"id"],[80,77,62,75],[80,78,62,76],[80,79,62,77],[81,10,64,6],[81,17,64,13],[82,12,65,8,"stories"],[82,19,65,15],[82,21,65,17],[82,22,65,18],[82,25,65,21,"rankedStories"],[82,39,65,34],[82,41,65,36],[82,44,65,39,"remainingStories"],[82,60,65,55],[82,61,65,56],[83,12,66,8,"algorithm"],[83,21,66,17],[83,23,66,19,"serverResult"],[83,35,66,31],[83,36,66,32,"algo"],[83,40,66,59],[84,12,67,8,"inCanary"],[84,20,67,16],[84,22,67,18,"serverResult"],[84,34,67,30],[84,35,67,31,"algo"],[84,39,67,35],[84,44,67,40],[84,50,67,46],[85,12,68,8,"userId"],[85,18,68,14],[86,12,69,8,"source"],[86,18,69,14],[86,20,69,16],[87,10,70,6],[87,11,70,7],[88,8,71,4],[90,8,73,4],[91,8,74,4,"console"],[91,15,74,11],[91,16,74,12,"warn"],[91,20,74,16],[91,21,74,17],[91,81,74,77],[91,82,74,78],[92,6,75,2],[94,6,77,2],[95,6,78,2],[95,10,78,8,"assignment"],[95,20,78,18],[95,23,78,21],[95,27,78,21,"assignRankerTreatment"],[95,37,78,42],[95,38,78,42,"assignRankerTreatment"],[95,59,78,42],[95,61,78,43,"userId"],[95,67,78,49],[95,68,78,50],[96,6,80,2],[96,10,80,6,"rankedStories"],[96,23,80,28],[97,6,81,2],[97,10,81,8,"rankerContext"],[97,23,81,21],[97,26,81,24],[98,8,82,4],[98,11,82,7,"context"],[98,18,82,14],[99,8,83,4,"userId"],[99,14,83,10],[100,8,84,4,"timestamp"],[100,17,84,13],[100,19,84,15,"Date"],[100,23,84,19],[100,24,84,20,"now"],[100,27,84,23],[100,28,84,24],[100,29,84,25],[101,8,85,4,"businessConstraints"],[101,27,85,23],[101,29,85,25],[102,10,86,6,"minCommissionRate"],[102,27,86,23],[102,29,86,25],[102,33,86,29],[103,10,87,6,"maxRepetition"],[103,23,87,19],[103,25,87,21],[103,26,87,22],[104,10,88,6,"freshnessBoost"],[104,24,88,20],[104,26,88,22],[104,29,88,25],[105,10,89,6,"diversityWeight"],[105,25,89,21],[105,27,89,23],[105,30,89,26],[106,10,90,6,"creatorTierWeights"],[106,28,90,24],[106,30,90,26],[107,12,91,8,"gold"],[107,16,91,12],[107,18,91,14],[107,21,91,17],[108,12,92,8,"blue"],[108,16,92,12],[108,18,92,14],[108,22,92,18],[109,12,93,8,"grey"],[109,16,93,12],[109,18,93,14],[109,22,93,18],[110,12,94,8,"unverified"],[110,22,94,18],[110,24,94,20],[111,10,95,6],[112,8,96,4],[113,6,97,2],[113,7,97,3],[114,6,99,2],[114,14,99,10,"assignment"],[114,24,99,20],[114,25,99,21,"algorithm"],[114,34,99,30],[115,8,100,4],[115,13,100,9],[115,19,100,15],[116,10,101,6,"rankedStories"],[116,23,101,19],[116,26,101,22],[116,30,101,22,"ucb1Ranker"],[116,37,101,32],[116,38,101,32,"ucb1Ranker"],[116,48,101,32],[116,50,101,33,"stories"],[116,57,101,40],[116,59,101,42,"rankerContext"],[116,72,101,55],[116,73,101,56],[117,10,102,6],[118,8,103,4],[118,13,103,9],[118,23,103,19],[119,8,104,4],[120,10,105,6,"rankedStories"],[120,23,105,19],[120,26,105,22],[120,30,105,22,"ranker"],[120,37,105,28],[120,38,105,28,"ranker"],[120,44,105,28],[120,46,105,29,"stories"],[120,53,105,36],[120,55,105,38,"rankerContext"],[120,68,105,51],[120,69,105,52],[121,10,106,6],[122,6,107,2],[124,6,109,2],[125,6,110,2,"rankedStories"],[125,19,110,15],[125,22,110,18,"enforceMinExposure"],[125,40,110,36],[125,41,110,37,"rankedStories"],[125,54,110,50],[125,56,110,52],[125,60,110,56],[125,61,110,57],[127,6,112,2],[128,6,113,2],[128,10,113,6,"context"],[128,17,113,13],[128,19,113,15,"track"],[128,24,113,20],[128,26,113,22],[129,8,114,4,"context"],[129,15,114,11],[129,16,114,12,"track"],[129,21,114,17],[129,22,114,18],[129,41,114,37],[129,43,114,39],[130,10,115,6,"userId"],[130,16,115,12],[131,10,116,6,"algorithm"],[131,19,116,15],[131,21,116,17,"assignment"],[131,31,116,27],[131,32,116,28,"algorithm"],[131,41,116,37],[132,10,117,6,"inCanary"],[132,18,117,14],[132,20,117,16,"assignment"],[132,30,117,26],[132,31,117,27,"inCanary"],[132,39,117,35],[133,10,118,6,"source"],[133,16,118,12],[133,18,118,14],[133,26,118,22],[134,10,119,6,"storyCount"],[134,20,119,16],[134,22,119,18,"stories"],[134,29,119,25],[134,30,119,26,"length"],[134,36,119,32],[135,10,120,6,"timestamp"],[135,19,120,15],[135,21,120,17,"Date"],[135,25,120,21],[135,26,120,22,"now"],[135,29,120,25],[135,30,120,26],[136,8,121,4],[136,9,121,5],[136,10,121,6],[137,6,122,2],[138,6,124,2],[138,13,124,9],[139,8,125,4,"stories"],[139,15,125,11],[139,17,125,13,"rankedStories"],[139,30,125,26],[140,8,126,4,"algorithm"],[140,17,126,13],[140,19,126,15,"assignment"],[140,29,126,25],[140,30,126,26,"algorithm"],[140,39,126,35],[141,8,127,4,"inCanary"],[141,16,127,12],[141,18,127,14,"assignment"],[141,28,127,24],[141,29,127,25,"inCanary"],[141,37,127,33],[142,8,128,4,"userId"],[142,14,128,10],[143,8,129,4,"source"],[143,14,129,10],[143,16,129,12],[144,6,130,2],[144,7,130,3],[145,4,131,0],[145,5,131,1],[146,4,131,1],[146,11,131,1,"_selectRanker"],[146,24,131,1],[146,25,131,1,"apply"],[146,30,131,1],[146,37,131,1,"arguments"],[146,46,131,1],[147,2,131,1],[148,2,134,0],[148,11,134,9,"enforceMinExposure"],[148,29,134,27,"enforceMinExposure"],[148,30,134,28,"stories"],[148,37,134,44],[148,39,134,70],[149,4,134,70],[149,8,134,46,"minPct"],[149,14,134,52],[149,17,134,52,"arguments"],[149,26,134,52],[149,27,134,52,"length"],[149,33,134,52],[149,41,134,52,"arguments"],[149,50,134,52],[149,58,134,52,"undefined"],[149,67,134,52],[149,70,134,52,"arguments"],[149,79,134,52],[149,85,134,55],[149,89,134,59],[150,4,135,2],[150,8,135,6,"stories"],[150,15,135,13],[150,16,135,14,"length"],[150,22,135,20],[150,26,135,24],[150,28,135,26],[150,30,135,28],[150,37,135,35,"stories"],[150,44,135,42],[150,45,135,43],[150,46,135,44],[152,4,137,2],[152,8,137,8,"totalStories"],[152,20,137,20],[152,23,137,23,"stories"],[152,30,137,30],[152,31,137,31,"length"],[152,37,137,37],[153,4,138,2],[153,8,138,8,"minExposure"],[153,19,138,19],[153,22,138,22,"Math"],[153,26,138,26],[153,27,138,27,"max"],[153,30,138,30],[153,31,138,31],[153,32,138,32],[153,34,138,34,"Math"],[153,38,138,38],[153,39,138,39,"floor"],[153,44,138,44],[153,45,138,45,"totalStories"],[153,57,138,57],[153,60,138,60,"minPct"],[153,66,138,66],[153,67,138,67],[153,68,138,68],[155,4,140,2],[156,4,141,2],[156,8,141,8,"creatorGroups"],[156,21,141,21],[156,24,141,24],[156,28,141,28,"Map"],[156,31,141,31],[156,32,141,49],[156,33,141,50],[157,4,142,2,"stories"],[157,11,142,9],[157,12,142,10,"forEach"],[157,19,142,17],[157,20,142,18,"story"],[157,25,142,23],[157,29,142,27],[158,6,143,4],[158,10,143,10,"creatorId"],[158,19,143,19],[158,22,143,22,"story"],[158,27,143,27],[158,28,143,28,"creatorId"],[158,37,143,37],[159,6,144,4],[159,10,144,8],[159,11,144,9,"creatorGroups"],[159,24,144,22],[159,25,144,23,"has"],[159,28,144,26],[159,29,144,27,"creatorId"],[159,38,144,36],[159,39,144,37],[159,41,144,39],[160,8,145,6,"creatorGroups"],[160,21,145,19],[160,22,145,20,"set"],[160,25,145,23],[160,26,145,24,"creatorId"],[160,35,145,33],[160,37,145,35],[160,39,145,37],[160,40,145,38],[161,6,146,4],[162,6,147,4,"creatorGroups"],[162,19,147,17],[162,20,147,18,"get"],[162,23,147,21],[162,24,147,22,"creatorId"],[162,33,147,31],[162,34,147,32],[162,35,147,34,"push"],[162,39,147,38],[162,40,147,39,"story"],[162,45,147,44],[162,46,147,45],[163,4,148,2],[163,5,148,3],[163,6,148,4],[165,4,150,2],[166,4,151,2],[166,8,151,8,"balanced"],[166,16,151,25],[166,19,151,28],[166,21,151,30],[167,4,152,2],[167,8,152,8,"remaining"],[167,17,152,26],[167,20,152,29],[167,22,152,31],[168,4,154,2,"creatorGroups"],[168,17,154,15],[168,18,154,16,"forEach"],[168,25,154,23],[168,26,154,24],[168,27,154,25,"creatorStories"],[168,41,154,39],[168,43,154,41,"creatorId"],[168,52,154,50],[168,57,154,55],[169,6,155,4],[169,10,155,10,"guaranteed"],[169,20,155,20],[169,23,155,23,"creatorStories"],[169,37,155,37],[169,38,155,38,"slice"],[169,43,155,43],[169,44,155,44],[169,45,155,45],[169,47,155,47,"Math"],[169,51,155,51],[169,52,155,52,"min"],[169,55,155,55],[169,56,155,56,"minExposure"],[169,67,155,67],[169,69,155,69,"creatorStories"],[169,83,155,83],[169,84,155,84,"length"],[169,90,155,90],[169,91,155,91],[169,92,155,92],[170,6,156,4],[170,10,156,10,"excess"],[170,16,156,16],[170,19,156,19,"creatorStories"],[170,33,156,33],[170,34,156,34,"slice"],[170,39,156,39],[170,40,156,40,"guaranteed"],[170,50,156,50],[170,51,156,51,"length"],[170,57,156,57],[170,58,156,58],[171,6,158,4,"balanced"],[171,14,158,12],[171,15,158,13,"push"],[171,19,158,17],[171,20,158,18],[171,23,158,21,"guaranteed"],[171,33,158,31],[171,34,158,32],[172,6,159,4,"remaining"],[172,15,159,13],[172,16,159,14,"push"],[172,20,159,18],[172,21,159,19],[172,24,159,22,"excess"],[172,30,159,28],[172,31,159,29],[173,4,160,2],[173,5,160,3],[173,6,160,4],[175,4,162,2],[176,4,163,2,"balanced"],[176,12,163,10],[176,13,163,11,"push"],[176,17,163,15],[176,18,163,16],[176,21,163,19,"remaining"],[176,30,163,28],[176,31,163,29],[177,4,165,2],[177,11,165,9,"balanced"],[177,19,165,17],[178,2,166,0],[180,2,168,0],[181,2,169,7],[181,11,169,16,"applyColdStartBoost"],[181,30,169,35,"applyColdStartBoost"],[181,31,169,36,"stories"],[181,38,169,52],[181,40,169,63],[182,4,170,2],[182,11,170,9,"stories"],[182,18,170,16],[182,19,170,17,"map"],[182,22,170,20],[182,23,170,21,"story"],[182,28,170,26],[182,32,170,30],[183,6,171,4],[183,10,171,10,"engagement"],[183,20,171,20],[183,23,171,23,"story"],[183,28,171,28],[183,29,171,29,"engagement"],[183,39,171,39],[183,43,171,43],[184,8,171,45,"impressions"],[184,19,171,56],[184,21,171,58],[184,22,171,59],[185,8,171,61,"ctas"],[185,12,171,65],[185,14,171,67],[185,15,171,68],[186,8,171,70,"purchases"],[186,17,171,79],[186,19,171,81],[186,20,171,82],[187,8,171,84,"views"],[187,13,171,89],[187,15,171,91],[188,6,171,93],[188,7,171,94],[190,6,173,4],[191,6,174,4],[191,10,174,8,"engagement"],[191,20,174,18],[191,21,174,19,"views"],[191,26,174,24],[191,31,174,29],[191,32,174,30],[191,36,174,34,"engagement"],[191,46,174,44],[191,47,174,45,"impressions"],[191,58,174,56],[191,63,174,61],[191,64,174,62],[191,66,174,64],[192,8,175,6],[192,15,175,13],[193,10,176,8],[193,13,176,11,"story"],[193,18,176,16],[194,10,177,8,"metadata"],[194,18,177,16],[194,20,177,18],[195,12,178,10],[195,15,178,13,"story"],[195,20,178,18],[195,21,178,19,"metadata"],[195,29,178,27],[196,12,179,10,"cold_start_prior"],[196,28,179,26],[196,30,179,28],[196,34,179,32],[197,12,179,34],[198,12,180,10,"freshness_boost"],[198,27,180,25],[198,29,180,27],[198,33,180,31],[198,34,180,34],[199,10,181,8],[200,8,182,6],[200,9,182,7],[201,6,183,4],[202,6,185,4],[202,13,185,11,"story"],[202,18,185,16],[203,4,186,2],[203,5,186,3],[203,6,186,4],[204,2,187,0],[205,0,187,1],[205,3]],"functionMap":{"names":["<global>","fetchServerRank","selectRanker","serverResult.items.map$argument_0","stories.find$argument_0","stories.filter$argument_0","enforceMinExposure","stories.forEach$argument_0","creatorGroups.forEach$argument_0","applyColdStartBoost","stories.map$argument_0"],"mappings":"AAA;OCiB;CDgB;OEE;aCqB,4BC,2BD,CD;4DCI,4BD;8CGC,8BH;CFqE;AMG;kBCQ;GDM;wBEM;GFM;CNM;OSG;qBCC;GDgB"},"hasCjsExports":false},"type":"js/module"}]}