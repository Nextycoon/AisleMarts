{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0},"end":{"line":11,"column":34}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = processTransformOrigin;\n  var _invariant = _interopRequireDefault(require(_dependencyMap[1], \"invariant\"));\n  const INDEX_X = 0;\n  const INDEX_Y = 1;\n  const INDEX_Z = 2;\n  function processTransformOrigin(transformOrigin) {\n    if (typeof transformOrigin === 'string') {\n      const transformOriginString = transformOrigin;\n      const regex = /(top|bottom|left|right|center|\\d+(?:%|px)|0)/gi;\n      const transformOriginArray = ['50%', '50%', 0];\n      let index = INDEX_X;\n      let matches;\n      outer: while (matches = regex.exec(transformOriginString)) {\n        let nextIndex = index + 1;\n        const value = matches[0];\n        const valueLower = value.toLowerCase();\n        switch (valueLower) {\n          case 'left':\n          case 'right':\n            {\n              (0, _invariant.default)(index === INDEX_X, 'Transform-origin %s can only be used for x-position', value);\n              transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';\n              break;\n            }\n          case 'top':\n          case 'bottom':\n            {\n              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin %s can only be used for y-position', value);\n              transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';\n              if (index === INDEX_X) {\n                const horizontal = regex.exec(transformOriginString);\n                if (horizontal == null) {\n                  break outer;\n                }\n                switch (horizontal[0].toLowerCase()) {\n                  case 'left':\n                    transformOriginArray[INDEX_X] = 0;\n                    break;\n                  case 'right':\n                    transformOriginArray[INDEX_X] = '100%';\n                    break;\n                  case 'center':\n                    transformOriginArray[INDEX_X] = '50%';\n                    break;\n                  default:\n                    (0, _invariant.default)(false, 'Could not parse transform-origin: %s', transformOriginString);\n                }\n                nextIndex = INDEX_Z;\n              }\n              break;\n            }\n          case 'center':\n            {\n              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin value %s cannot be used for z-position', value);\n              transformOriginArray[index] = '50%';\n              break;\n            }\n          default:\n            {\n              if (value.endsWith('%')) {\n                transformOriginArray[index] = value;\n              } else {\n                transformOriginArray[index] = parseFloat(value);\n              }\n              break;\n            }\n        }\n        index = nextIndex;\n      }\n      transformOrigin = transformOriginArray;\n    }\n    if (__DEV__) {\n      _validateTransformOrigin(transformOrigin);\n    }\n    return transformOrigin;\n  }\n  function _validateTransformOrigin(transformOrigin) {\n    (0, _invariant.default)(transformOrigin.length === 3, 'Transform origin must have exactly 3 values.');\n    const [x, y, z] = transformOrigin;\n    (0, _invariant.default)(typeof x === 'number' || typeof x === 'string' && x.endsWith('%'), 'Transform origin x-position must be a number. Passed value: %s.', x);\n    (0, _invariant.default)(typeof y === 'number' || typeof y === 'string' && y.endsWith('%'), 'Transform origin y-position must be a number. Passed value: %s.', y);\n    (0, _invariant.default)(typeof z === 'number', 'Transform origin z-position must be a number. Passed value: %s.', z);\n  }\n});","lineCount":89,"map":[[7,2,11,0],[7,6,11,0,"_invariant"],[7,16,11,0],[7,19,11,0,"_interopRequireDefault"],[7,41,11,0],[7,42,11,0,"require"],[7,49,11,0],[7,50,11,0,"_dependencyMap"],[7,64,11,0],[8,2,13,0],[8,8,13,6,"INDEX_X"],[8,15,13,13],[8,18,13,16],[8,19,13,17],[9,2,14,0],[9,8,14,6,"INDEX_Y"],[9,15,14,13],[9,18,14,16],[9,19,14,17],[10,2,15,0],[10,8,15,6,"INDEX_Z"],[10,15,15,13],[10,18,15,16],[10,19,15,17],[11,2,18,15],[11,11,18,24,"processTransformOrigin"],[11,33,18,46,"processTransformOrigin"],[11,34,19,2,"transformOrigin"],[11,49,19,50],[11,51,20,26],[12,4,21,2],[12,8,21,6],[12,15,21,13,"transformOrigin"],[12,30,21,28],[12,35,21,33],[12,43,21,41],[12,45,21,43],[13,6,22,4],[13,12,22,10,"transformOriginString"],[13,33,22,31],[13,36,22,34,"transformOrigin"],[13,51,22,49],[14,6,23,4],[14,12,23,10,"regex"],[14,17,23,15],[14,20,23,18],[14,68,23,66],[15,6,24,4],[15,12,24,10,"transformOriginArray"],[15,32,24,54],[15,35,24,57],[15,36,24,58],[15,41,24,63],[15,43,24,65],[15,48,24,70],[15,50,24,72],[15,51,24,73],[15,52,24,74],[16,6,26,4],[16,10,26,8,"index"],[16,15,26,13],[16,18,26,16,"INDEX_X"],[16,25,26,23],[17,6,27,4],[17,10,27,8,"matches"],[17,17,27,15],[18,6,28,4,"outer"],[18,11,28,9],[18,13,28,11],[18,20,28,19,"matches"],[18,27,28,26],[18,30,28,29,"regex"],[18,35,28,34],[18,36,28,35,"exec"],[18,40,28,39],[18,41,28,40,"transformOriginString"],[18,62,28,61],[18,63,28,62],[18,65,28,65],[19,8,29,6],[19,12,29,10,"nextIndex"],[19,21,29,19],[19,24,29,22,"index"],[19,29,29,27],[19,32,29,30],[19,33,29,31],[20,8,31,6],[20,14,31,12,"value"],[20,19,31,17],[20,22,31,20,"matches"],[20,29,31,27],[20,30,31,28],[20,31,31,29],[20,32,31,30],[21,8,32,6],[21,14,32,12,"valueLower"],[21,24,32,22],[21,27,32,25,"value"],[21,32,32,30],[21,33,32,31,"toLowerCase"],[21,44,32,42],[21,45,32,43],[21,46,32,44],[22,8,34,6],[22,16,34,14,"valueLower"],[22,26,34,24],[23,10,35,8],[23,15,35,13],[23,21,35,19],[24,10,36,8],[24,15,36,13],[24,22,36,20],[25,12,36,22],[26,14,37,10],[26,18,37,10,"invariant"],[26,36,37,19],[26,38,38,12,"index"],[26,43,38,17],[26,48,38,22,"INDEX_X"],[26,55,38,29],[26,57,39,12],[26,110,39,65],[26,112,40,12,"value"],[26,117,41,10],[26,118,41,11],[27,14,42,10,"transformOriginArray"],[27,34,42,30],[27,35,42,31,"INDEX_X"],[27,42,42,38],[27,43,42,39],[27,46,42,42,"valueLower"],[27,56,42,52],[27,61,42,57],[27,67,42,63],[27,70,42,66],[27,71,42,67],[27,74,42,70],[27,80,42,76],[28,14,43,10],[29,12,44,8],[30,10,45,8],[30,15,45,13],[30,20,45,18],[31,10,46,8],[31,15,46,13],[31,23,46,21],[32,12,46,23],[33,14,47,10],[33,18,47,10,"invariant"],[33,36,47,19],[33,38,48,12,"index"],[33,43,48,17],[33,48,48,22,"INDEX_Z"],[33,55,48,29],[33,57,49,12],[33,110,49,65],[33,112,50,12,"value"],[33,117,51,10],[33,118,51,11],[34,14,52,10,"transformOriginArray"],[34,34,52,30],[34,35,52,31,"INDEX_Y"],[34,42,52,38],[34,43,52,39],[34,46,52,42,"valueLower"],[34,56,52,52],[34,61,52,57],[34,66,52,62],[34,69,52,65],[34,70,52,66],[34,73,52,69],[34,79,52,75],[35,14,55,10],[35,18,55,14,"index"],[35,23,55,19],[35,28,55,24,"INDEX_X"],[35,35,55,31],[35,37,55,33],[36,16,56,12],[36,22,56,18,"horizontal"],[36,32,56,28],[36,35,56,31,"regex"],[36,40,56,36],[36,41,56,37,"exec"],[36,45,56,41],[36,46,56,42,"transformOriginString"],[36,67,56,63],[36,68,56,64],[37,16,57,12],[37,20,57,16,"horizontal"],[37,30,57,26],[37,34,57,30],[37,38,57,34],[37,40,57,36],[38,18,58,14],[38,24,58,20,"outer"],[38,29,58,25],[39,16,59,12],[40,16,61,12],[40,24,61,20,"horizontal"],[40,34,61,30],[40,35,61,31],[40,36,61,32],[40,37,61,33],[40,38,61,34,"toLowerCase"],[40,49,61,45],[40,50,61,46],[40,51,61,47],[41,18,62,14],[41,23,62,19],[41,29,62,25],[42,20,63,16,"transformOriginArray"],[42,40,63,36],[42,41,63,37,"INDEX_X"],[42,48,63,44],[42,49,63,45],[42,52,63,48],[42,53,63,49],[43,20,64,16],[44,18,65,14],[44,23,65,19],[44,30,65,26],[45,20,66,16,"transformOriginArray"],[45,40,66,36],[45,41,66,37,"INDEX_X"],[45,48,66,44],[45,49,66,45],[45,52,66,48],[45,58,66,54],[46,20,67,16],[47,18,68,14],[47,23,68,19],[47,31,68,27],[48,20,69,16,"transformOriginArray"],[48,40,69,36],[48,41,69,37,"INDEX_X"],[48,48,69,44],[48,49,69,45],[48,52,69,48],[48,57,69,53],[49,20,70,16],[50,18,71,14],[51,20,72,16],[51,24,72,16,"invariant"],[51,42,72,25],[51,44,73,18],[51,49,73,23],[51,51,74,18],[51,89,74,56],[51,91,75,18,"transformOriginString"],[51,112,76,16],[51,113,76,17],[52,16,77,12],[53,16,78,12,"nextIndex"],[53,25,78,21],[53,28,78,24,"INDEX_Z"],[53,35,78,31],[54,14,79,10],[55,14,81,10],[56,12,82,8],[57,10,83,8],[57,15,83,13],[57,23,83,21],[58,12,83,23],[59,14,84,10],[59,18,84,10,"invariant"],[59,36,84,19],[59,38,85,12,"index"],[59,43,85,17],[59,48,85,22,"INDEX_Z"],[59,55,85,29],[59,57,86,12],[59,114,86,69],[59,116,87,12,"value"],[59,121,88,10],[59,122,88,11],[60,14,89,10,"transformOriginArray"],[60,34,89,30],[60,35,89,31,"index"],[60,40,89,36],[60,41,89,37],[60,44,89,40],[60,49,89,45],[61,14,90,10],[62,12,91,8],[63,10,92,8],[64,12,92,17],[65,14,93,10],[65,18,93,14,"value"],[65,23,93,19],[65,24,93,20,"endsWith"],[65,32,93,28],[65,33,93,29],[65,36,93,32],[65,37,93,33],[65,39,93,35],[66,16,94,12,"transformOriginArray"],[66,36,94,32],[66,37,94,33,"index"],[66,42,94,38],[66,43,94,39],[66,46,94,42,"value"],[66,51,94,47],[67,14,95,10],[67,15,95,11],[67,21,95,17],[68,16,96,12,"transformOriginArray"],[68,36,96,32],[68,37,96,33,"index"],[68,42,96,38],[68,43,96,39],[68,46,96,42,"parseFloat"],[68,56,96,52],[68,57,96,53,"value"],[68,62,96,58],[68,63,96,59],[69,14,97,10],[70,14,98,10],[71,12,99,8],[72,8,100,6],[73,8,102,6,"index"],[73,13,102,11],[73,16,102,14,"nextIndex"],[73,25,102,23],[74,6,103,4],[75,6,105,4,"transformOrigin"],[75,21,105,19],[75,24,105,22,"transformOriginArray"],[75,44,105,42],[76,4,106,2],[77,4,108,2],[77,8,108,6,"__DEV__"],[77,15,108,13],[77,17,108,15],[78,6,109,4,"_validateTransformOrigin"],[78,30,109,28],[78,31,109,29,"transformOrigin"],[78,46,109,44],[78,47,109,45],[79,4,110,2],[80,4,112,2],[80,11,112,9,"transformOrigin"],[80,26,112,24],[81,2,113,0],[82,2,115,0],[82,11,115,9,"_validateTransformOrigin"],[82,35,115,33,"_validateTransformOrigin"],[82,36,115,34,"transformOrigin"],[82,51,115,73],[82,53,115,75],[83,4,116,2],[83,8,116,2,"invariant"],[83,26,116,11],[83,28,117,4,"transformOrigin"],[83,43,117,19],[83,44,117,20,"length"],[83,50,117,26],[83,55,117,31],[83,56,117,32],[83,58,118,4],[83,104,119,2],[83,105,119,3],[84,4,120,2],[84,10,120,8],[84,11,120,9,"x"],[84,12,120,10],[84,14,120,12,"y"],[84,15,120,13],[84,17,120,15,"z"],[84,18,120,16],[84,19,120,17],[84,22,120,20,"transformOrigin"],[84,37,120,35],[85,4,121,2],[85,8,121,2,"invariant"],[85,26,121,11],[85,28,122,4],[85,35,122,11,"x"],[85,36,122,12],[85,41,122,17],[85,49,122,25],[85,53,122,30],[85,60,122,37,"x"],[85,61,122,38],[85,66,122,43],[85,74,122,51],[85,78,122,55,"x"],[85,79,122,56],[85,80,122,57,"endsWith"],[85,88,122,65],[85,89,122,66],[85,92,122,69],[85,93,122,71],[85,95,123,4],[85,160,123,69],[85,162,124,4,"x"],[85,163,125,2],[85,164,125,3],[86,4,126,2],[86,8,126,2,"invariant"],[86,26,126,11],[86,28,127,4],[86,35,127,11,"y"],[86,36,127,12],[86,41,127,17],[86,49,127,25],[86,53,127,30],[86,60,127,37,"y"],[86,61,127,38],[86,66,127,43],[86,74,127,51],[86,78,127,55,"y"],[86,79,127,56],[86,80,127,57,"endsWith"],[86,88,127,65],[86,89,127,66],[86,92,127,69],[86,93,127,71],[86,95,128,4],[86,160,128,69],[86,162,129,4,"y"],[86,163,130,2],[86,164,130,3],[87,4,131,2],[87,8,131,2,"invariant"],[87,26,131,11],[87,28,132,4],[87,35,132,11,"z"],[87,36,132,12],[87,41,132,17],[87,49,132,25],[87,51,133,4],[87,116,133,69],[87,118,134,4,"z"],[87,119,135,2],[87,120,135,3],[88,2,136,0],[89,0,136,1],[89,3]],"functionMap":{"names":["<global>","processTransformOrigin","_validateTransformOrigin"],"mappings":"AAA;eCiB;CD+F;AEE"}},"type":"js/module"}]}