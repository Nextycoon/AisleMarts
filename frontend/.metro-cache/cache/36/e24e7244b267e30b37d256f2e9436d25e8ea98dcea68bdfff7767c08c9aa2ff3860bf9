{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"ranker\", {\n    enumerable: true,\n    get: function () {\n      return ranker;\n    }\n  });\n  exports.applyRanking = applyRanking;\n  exports.createRankerContext = createRankerContext;\n  /**\n   * P2 Preparation: Ranker Hook for AI Recommendations\n   * \n   * This provides a clean interface for story ranking algorithms.\n   * Currently returns identity function - ready for P2 UCB1 bandit integration.\n   */\n\n  // P2 Interface: UCB1 Bandit Ranking Function\n\n  // P1 Implementation: Identity function (no ranking)\n  // P2 will replace with: UCB(click_rate, views) + λ * commission_rate + β * freshness - γ * repetition\n  var ranker = (stories, context) => {\n    // For P1: return stories as-is (preserve existing order)\n    return stories;\n  };\n\n  // P2 Preview: UCB1 Bandit Algorithm (commented out for P1)\n  /*\n  export const ucb1Ranker: Ranker = (stories: Story[], context?: RankerContext) => {\n    const now = Date.now();\n    const constraints = context?.businessConstraints || {};\n    \n    return stories\n      .map(story => {\n        const engagement = story.engagement || { impressions: 1, ctas: 0, purchases: 0 };\n        const metadata = story.metadata || { freshness: now, commission_rate: 0.05, repetition_penalty: 0 };\n        \n        // UCB1 Score Calculation\n        const clickRate = engagement.ctas / Math.max(engagement.impressions, 1);\n        const confidence = Math.sqrt(2 * Math.log(engagement.impressions) / Math.max(engagement.ctas, 1));\n        const ucbScore = clickRate + confidence;\n        \n        // Business Constraints\n        const commissionBoost = metadata.commission_rate * (constraints.minCommissionRate || 1);\n        const freshnessBoost = Math.max(0, 1 - (now - metadata.freshness) / (24 * 60 * 60 * 1000)) * (constraints.freshnessBoost || 0.1);\n        const repetitionPenalty = metadata.repetition_penalty * (constraints.maxRepetition || 0.1);\n        \n        // Final Score: UCB + λ*commission + β*freshness - γ*repetition\n        const finalScore = ucbScore + commissionBoost + freshnessBoost - repetitionPenalty;\n        \n        return { ...story, _score: finalScore };\n      })\n      .sort((a, b) => (b._score || 0) - (a._score || 0))\n      .map(({ _score, ...story }) => story);\n  };\n  */\n\n  // Utility: Apply ranker to story feed\n  function applyRanking(stories, context) {\n    return ranker(stories, context);\n  }\n\n  // Utility: Create ranker context from user session\n  function createRankerContext(userId, sessionId) {\n    var previousStories = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var businessConstraints = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    return {\n      userId,\n      sessionId,\n      previousStories,\n      businessConstraints\n    };\n  }\n});","lineCount":78,"map":[[7,2,44,0,"Object"],[7,8,44,0],[7,9,44,0,"defineProperty"],[7,23,44,0],[7,24,44,0,"exports"],[7,31,44,0],[8,4,44,0,"enumerable"],[8,14,44,0],[9,4,44,0,"get"],[9,7,44,0],[9,18,44,0,"get"],[9,19,44,0],[10,6,44,0],[10,13,44,0,"ranker"],[10,19,44,0],[11,4,44,0],[12,2,44,0],[13,2,81,0,"exports"],[13,9,81,0],[13,10,81,0,"applyRanking"],[13,22,81,0],[13,25,81,0,"applyRanking"],[13,37,81,0],[14,2,86,0,"exports"],[14,9,86,0],[14,10,86,0,"createRankerContext"],[14,29,86,0],[14,32,86,0,"createRankerContext"],[14,51,86,0],[15,2,1,0],[16,0,2,0],[17,0,3,0],[18,0,4,0],[19,0,5,0],[20,0,6,0],[22,2,36,0],[24,2,42,0],[25,2,43,0],[26,2,44,7],[26,6,44,13,"ranker"],[26,12,44,27],[26,15,44,30,"ranker"],[26,16,44,31,"stories"],[26,23,44,47],[26,25,44,49,"context"],[26,32,44,72],[26,37,44,77],[27,4,45,2],[28,4,46,2],[28,11,46,9,"stories"],[28,18,46,16],[29,2,47,0],[29,3,47,1],[31,2,49,0],[32,2,50,0],[33,0,51,0],[34,0,52,0],[35,0,53,0],[36,0,54,0],[37,0,55,0],[38,0,56,0],[39,0,57,0],[40,0,58,0],[41,0,59,0],[42,0,60,0],[43,0,61,0],[44,0,62,0],[45,0,63,0],[46,0,64,0],[47,0,65,0],[48,0,66,0],[49,0,67,0],[50,0,68,0],[51,0,69,0],[52,0,70,0],[53,0,71,0],[54,0,72,0],[55,0,73,0],[56,0,74,0],[57,0,75,0],[58,0,76,0],[59,0,77,0],[60,0,78,0],[62,2,80,0],[63,2,81,7],[63,11,81,16,"applyRanking"],[63,23,81,28,"applyRanking"],[63,24,81,29,"stories"],[63,31,81,45],[63,33,81,47,"context"],[63,40,81,70],[63,42,81,81],[64,4,82,2],[64,11,82,9,"ranker"],[64,17,82,15],[64,18,82,16,"stories"],[64,25,82,23],[64,27,82,25,"context"],[64,34,82,32],[64,35,82,33],[65,2,83,0],[67,2,85,0],[68,2,86,7],[68,11,86,16,"createRankerContext"],[68,30,86,35,"createRankerContext"],[68,31,87,2,"userId"],[68,37,87,16],[68,39,88,2,"sessionId"],[68,48,88,19],[68,50,91,17],[69,4,91,17],[69,8,89,2,"previousStories"],[69,23,89,27],[69,26,89,27,"arguments"],[69,35,89,27],[69,36,89,27,"length"],[69,42,89,27],[69,50,89,27,"arguments"],[69,59,89,27],[69,67,89,27,"undefined"],[69,76,89,27],[69,79,89,27,"arguments"],[69,88,89,27],[69,94,89,30],[69,96,89,32],[70,4,89,32],[70,8,90,2,"businessConstraints"],[70,27,90,21],[70,30,90,21,"arguments"],[70,39,90,21],[70,40,90,21,"length"],[70,46,90,21],[70,54,90,21,"arguments"],[70,63,90,21],[70,71,90,21,"undefined"],[70,80,90,21],[70,83,90,21,"arguments"],[70,92,90,21],[70,98,90,24],[70,99,90,25],[70,100,90,26],[71,4,92,2],[71,11,92,9],[72,6,93,4,"userId"],[72,12,93,10],[73,6,94,4,"sessionId"],[73,15,94,13],[74,6,95,4,"previousStories"],[74,21,95,19],[75,6,96,4,"businessConstraints"],[76,4,97,2],[76,5,97,3],[77,2,98,0],[78,0,98,1],[78,3]],"functionMap":{"names":["<global>","ranker","applyRanking","createRankerContext"],"mappings":"AAA;8BC2C;CDG;OEkC;CFE;OGG"},"hasCjsExports":false},"type":"js/module"}]}