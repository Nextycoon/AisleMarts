{"dependencies":[{"name":"./regionMaps","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":39},"end":{"line":2,"column":45,"index":84}}],"key":"CBNzS+2ZOAFJxxNk7IWpfMiNwM8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.formatAmount = formatAmount;\n  var _regionMaps = require(_dependencyMap[0], \"./regionMaps\");\n  function formatAmount(amount, code, locale) {\n    // Try Intl.NumberFormat first for better formatting\n    try {\n      return new Intl.NumberFormat(locale || undefined, {\n        style: \"currency\",\n        currency: code,\n        currencyDisplay: \"symbol\",\n        maximumFractionDigits: 2\n      }).format(amount);\n    } catch (error) {\n      // Fallback to manual formatting with cultural awareness\n      return formatAmountManual(amount, code);\n    }\n  }\n  function formatAmountManual(amount, code) {\n    const currency = _regionMaps.CURRENCY_DATA[code];\n    if (!currency) {\n      return `${code} ${amount.toFixed(2)}`;\n    }\n\n    // Apply rounding based on decimals\n    const roundedAmount = Number(amount.toFixed(currency.decimals));\n\n    // Format number with proper separators\n    let formattedNumber;\n    if (currency.decimals === 0) {\n      formattedNumber = Math.round(roundedAmount).toString();\n    } else {\n      formattedNumber = roundedAmount.toFixed(currency.decimals);\n    }\n\n    // Apply cultural number formatting\n    const parts = formattedNumber.split('.');\n    let integerPart = parts[0];\n    const decimalPart = parts[1];\n\n    // Add thousands delimiter\n    if (currency.delimiter && integerPart.length > 3) {\n      integerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, currency.delimiter);\n    }\n\n    // Combine with separator\n    if (decimalPart && currency.decimals > 0) {\n      formattedNumber = integerPart + currency.separator + decimalPart;\n    } else {\n      formattedNumber = integerPart;\n    }\n\n    // Apply symbol positioning\n    if (currency.format === 'before') {\n      return `${currency.symbol}${formattedNumber}`;\n    } else {\n      return `${formattedNumber} ${currency.symbol}`;\n    }\n  }\n});","lineCount":64,"map":[[7,2,4,0,"exports"],[7,9,4,0],[7,10,4,0,"formatAmount"],[7,22,4,0],[7,25,4,0,"formatAmount"],[7,37,4,0],[8,2,2,0],[8,6,2,0,"_regionMaps"],[8,17,2,0],[8,20,2,0,"require"],[8,27,2,0],[8,28,2,0,"_dependencyMap"],[8,42,2,0],[9,2,4,7],[9,11,4,16,"formatAmount"],[9,23,4,28,"formatAmount"],[9,24,4,29,"amount"],[9,30,4,43],[9,32,4,45,"code"],[9,36,4,62],[9,38,4,64,"locale"],[9,44,4,79],[9,46,4,89],[10,4,5,2],[11,4,6,2],[11,8,6,6],[12,6,7,4],[12,13,7,11],[12,17,7,15,"Intl"],[12,21,7,19],[12,22,7,20,"NumberFormat"],[12,34,7,32],[12,35,7,33,"locale"],[12,41,7,39],[12,45,7,43,"undefined"],[12,54,7,52],[12,56,7,54],[13,8,8,6,"style"],[13,13,8,11],[13,15,8,13],[13,25,8,23],[14,8,9,6,"currency"],[14,16,9,14],[14,18,9,16,"code"],[14,22,9,20],[15,8,10,6,"currencyDisplay"],[15,23,10,21],[15,25,10,23],[15,33,10,31],[16,8,11,6,"maximumFractionDigits"],[16,29,11,27],[16,31,11,29],[17,6,12,4],[17,7,12,5],[17,8,12,6],[17,9,12,7,"format"],[17,15,12,13],[17,16,12,14,"amount"],[17,22,12,20],[17,23,12,21],[18,4,13,2],[18,5,13,3],[18,6,13,4],[18,13,13,11,"error"],[18,18,13,16],[18,20,13,18],[19,6,14,4],[20,6,15,4],[20,13,15,11,"formatAmountManual"],[20,31,15,29],[20,32,15,30,"amount"],[20,38,15,36],[20,40,15,38,"code"],[20,44,15,42],[20,45,15,43],[21,4,16,2],[22,2,17,0],[23,2,19,0],[23,11,19,9,"formatAmountManual"],[23,29,19,27,"formatAmountManual"],[23,30,19,28,"amount"],[23,36,19,42],[23,38,19,44,"code"],[23,42,19,61],[23,44,19,71],[24,4,20,2],[24,10,20,8,"currency"],[24,18,20,16],[24,21,20,19,"CURRENCY_DATA"],[24,32,20,32],[24,33,20,32,"CURRENCY_DATA"],[24,46,20,32],[24,47,20,33,"code"],[24,51,20,37],[24,52,20,38],[25,4,21,2],[25,8,21,6],[25,9,21,7,"currency"],[25,17,21,15],[25,19,21,17],[26,6,22,4],[26,13,22,11],[26,16,22,14,"code"],[26,20,22,18],[26,24,22,22,"amount"],[26,30,22,28],[26,31,22,29,"toFixed"],[26,38,22,36],[26,39,22,37],[26,40,22,38],[26,41,22,39],[26,43,22,41],[27,4,23,2],[29,4,25,2],[30,4,26,2],[30,10,26,8,"roundedAmount"],[30,23,26,21],[30,26,26,24,"Number"],[30,32,26,30],[30,33,26,31,"amount"],[30,39,26,37],[30,40,26,38,"toFixed"],[30,47,26,45],[30,48,26,46,"currency"],[30,56,26,54],[30,57,26,55,"decimals"],[30,65,26,63],[30,66,26,64],[30,67,26,65],[32,4,28,2],[33,4,29,2],[33,8,29,6,"formattedNumber"],[33,23,29,29],[34,4,30,2],[34,8,30,6,"currency"],[34,16,30,14],[34,17,30,15,"decimals"],[34,25,30,23],[34,30,30,28],[34,31,30,29],[34,33,30,31],[35,6,31,4,"formattedNumber"],[35,21,31,19],[35,24,31,22,"Math"],[35,28,31,26],[35,29,31,27,"round"],[35,34,31,32],[35,35,31,33,"roundedAmount"],[35,48,31,46],[35,49,31,47],[35,50,31,48,"toString"],[35,58,31,56],[35,59,31,57],[35,60,31,58],[36,4,32,2],[36,5,32,3],[36,11,32,9],[37,6,33,4,"formattedNumber"],[37,21,33,19],[37,24,33,22,"roundedAmount"],[37,37,33,35],[37,38,33,36,"toFixed"],[37,45,33,43],[37,46,33,44,"currency"],[37,54,33,52],[37,55,33,53,"decimals"],[37,63,33,61],[37,64,33,62],[38,4,34,2],[40,4,36,2],[41,4,37,2],[41,10,37,8,"parts"],[41,15,37,13],[41,18,37,16,"formattedNumber"],[41,33,37,31],[41,34,37,32,"split"],[41,39,37,37],[41,40,37,38],[41,43,37,41],[41,44,37,42],[42,4,38,2],[42,8,38,6,"integerPart"],[42,19,38,17],[42,22,38,20,"parts"],[42,27,38,25],[42,28,38,26],[42,29,38,27],[42,30,38,28],[43,4,39,2],[43,10,39,8,"decimalPart"],[43,21,39,19],[43,24,39,22,"parts"],[43,29,39,27],[43,30,39,28],[43,31,39,29],[43,32,39,30],[45,4,41,2],[46,4,42,2],[46,8,42,6,"currency"],[46,16,42,14],[46,17,42,15,"delimiter"],[46,26,42,24],[46,30,42,28,"integerPart"],[46,41,42,39],[46,42,42,40,"length"],[46,48,42,46],[46,51,42,49],[46,52,42,50],[46,54,42,52],[47,6,43,4,"integerPart"],[47,17,43,15],[47,20,43,18,"integerPart"],[47,31,43,29],[47,32,43,30,"replace"],[47,39,43,37],[47,40,43,38],[47,63,43,61],[47,65,43,63,"currency"],[47,73,43,71],[47,74,43,72,"delimiter"],[47,83,43,81],[47,84,43,82],[48,4,44,2],[50,4,46,2],[51,4,47,2],[51,8,47,6,"decimalPart"],[51,19,47,17],[51,23,47,21,"currency"],[51,31,47,29],[51,32,47,30,"decimals"],[51,40,47,38],[51,43,47,41],[51,44,47,42],[51,46,47,44],[52,6,48,4,"formattedNumber"],[52,21,48,19],[52,24,48,22,"integerPart"],[52,35,48,33],[52,38,48,36,"currency"],[52,46,48,44],[52,47,48,45,"separator"],[52,56,48,54],[52,59,48,57,"decimalPart"],[52,70,48,68],[53,4,49,2],[53,5,49,3],[53,11,49,9],[54,6,50,4,"formattedNumber"],[54,21,50,19],[54,24,50,22,"integerPart"],[54,35,50,33],[55,4,51,2],[57,4,53,2],[58,4,54,2],[58,8,54,6,"currency"],[58,16,54,14],[58,17,54,15,"format"],[58,23,54,21],[58,28,54,26],[58,36,54,34],[58,38,54,36],[59,6,55,4],[59,13,55,11],[59,16,55,14,"currency"],[59,24,55,22],[59,25,55,23,"symbol"],[59,31,55,29],[59,34,55,32,"formattedNumber"],[59,49,55,47],[59,51,55,49],[60,4,56,2],[60,5,56,3],[60,11,56,9],[61,6,57,4],[61,13,57,11],[61,16,57,14,"formattedNumber"],[61,31,57,29],[61,35,57,33,"currency"],[61,43,57,41],[61,44,57,42,"symbol"],[61,50,57,48],[61,52,57,50],[62,4,58,2],[63,2,59,0],[64,0,59,1],[64,3]],"functionMap":{"names":["<global>","formatAmount","formatAmountManual"],"mappings":"AAA;OCG;CDa;AEE"},"hasCjsExports":false},"type":"js/module"}]}