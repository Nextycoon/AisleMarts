{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":203},"end":{"line":9,"column":57,"index":260}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"]}},{"name":"./internal/defaultConfiguration","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":302},"end":{"line":11,"column":68,"index":370}}],"key":"G1uCgDScaM3S5X00e27Zr8lG1Vk=","exportNames":["*"]}},{"name":"./internal/nativeInterface","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":371},"end":{"line":12,"column":57,"index":428}}],"key":"Sp4VfNT4MoXGzcKDwaXut8oRUXA=","exportNames":["*"]}},{"name":"./internal/state","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":429},"end":{"line":13,"column":37,"index":466}}],"key":"AJQfTgXn0K20r74TcE/30yPPOOA=","exportNames":["*"]}},{"name":"./internal/types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":467},"end":{"line":14,"column":42,"index":509}}],"key":"uIQB1mLKV8iOTHySJkPsqOCQMhM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _exportNames = {\n    configure: true,\n    fetch: true,\n    refresh: true,\n    addEventListener: true,\n    useNetInfo: true,\n    useNetInfoInstance: true\n  };\n  exports.addEventListener = addEventListener;\n  exports.configure = configure;\n  exports.default = void 0;\n  exports.fetch = fetch;\n  exports.refresh = refresh;\n  exports.useNetInfo = useNetInfo;\n  exports.useNetInfoInstance = useNetInfoInstance;\n  var _react = require(_dependencyMap[1], \"react\");\n  var _Platform = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/Platform\"));\n  var _defaultConfiguration = _interopRequireDefault(require(_dependencyMap[3], \"./internal/defaultConfiguration\"));\n  var _nativeInterface = _interopRequireDefault(require(_dependencyMap[4], \"./internal/nativeInterface\"));\n  var _state2 = _interopRequireDefault(require(_dependencyMap[5], \"./internal/state\"));\n  var Types = _interopRequireWildcard(require(_dependencyMap[6], \"./internal/types\"));\n  Object.keys(Types).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === Types[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function () {\n        return Types[key];\n      }\n    });\n  });\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  /**\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   */\n\n  // Stores the currently used configuration\n\n  let _configuration = _defaultConfiguration.default; // Stores the singleton reference to the state manager\n\n  let _state = null;\n  const createState = () => {\n    return new _state2.default(_configuration);\n  }; // Track ongoing requests\n\n  let isRequestInProgress = false;\n  let requestQueue = [];\n  /**\n   * Configures the library with the given configuration. Note that calling this will stop all\n   * previously added listeners from being called again. It is best to call this right when your\n   * application is started to avoid issues. The configuration sets up a global singleton instance.\n   *\n   * @param configuration The new configuration to set.\n   */\n\n  function configure(configuration) {\n    _configuration = Object.assign({}, _defaultConfiguration.default, configuration);\n    if (_state) {\n      _state.tearDown();\n      _state = createState();\n    }\n    if (_Platform.default.OS === 'ios') {\n      _nativeInterface.default.configure(configuration);\n    }\n  }\n  /**\n   * Returns a `Promise` that resolves to a `NetInfoState` object.\n   * This function operates on the global singleton instance configured using `configure()`\n   *\n   * @param [requestedInterface] interface from which to obtain the information\n   *\n   * @returns A Promise which contains the current connection state.\n   */\n\n  function fetch(requestedInterface) {\n    if (!_state) {\n      _state = createState();\n    }\n    return _state.latest(requestedInterface);\n  }\n  /**\n   * Force-refreshes the internal state of the global singleton managed by this library.\n   *\n   * @returns A Promise which contains the updated connection state.\n   */\n\n  function refresh() {\n    if (!_state) {\n      _state = createState();\n    } // If a request is already in progress, return a promise that will resolve when the current request finishes\n\n    if (isRequestInProgress) {\n      return new Promise(resolve => {\n        requestQueue.push(resolve);\n      });\n    }\n    isRequestInProgress = true;\n    return _state._fetchCurrentState().then(result => {\n      requestQueue.forEach(resolve => resolve(result));\n      requestQueue = [];\n      return result;\n    }).finally(() => {\n      isRequestInProgress = false;\n    });\n  }\n  /**\n   * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n   * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n   * will be called with the latest information soon after you subscribe and then with any\n   * subsequent changes afterwards. You should not assume that the listener is called in the same\n   * way across devices or platforms.\n   *\n   * @param listener The listener which is called when the network state changes.\n   *\n   * @returns A function which can be called to unsubscribe.\n   */\n\n  function addEventListener(listener) {\n    if (!_state) {\n      _state = createState();\n    }\n    _state.add(listener);\n    return () => {\n      _state && _state.remove(listener);\n    };\n  }\n  /**\n   * A React Hook into this library's singleton which updates when the connection state changes.\n   *\n   * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n   *\n   * @returns The connection state.\n   */\n\n  function useNetInfo(configuration) {\n    if (configuration) {\n      configure(configuration);\n    }\n    const [netInfo, setNetInfo] = (0, _react.useState)({\n      type: Types.NetInfoStateType.unknown,\n      isConnected: null,\n      isInternetReachable: null,\n      details: null\n    });\n    (0, _react.useEffect)(() => {\n      const unsubscribe = addEventListener(setNetInfo);\n      return () => unsubscribe();\n    }, []);\n    return netInfo;\n  }\n  /**\n   * A React Hook which manages an isolated instance of the network info manager.\n   * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n   * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n   * @param {boolean} isPaused - Pause the internal network checks.\n   * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n   *\n   * @returns the netInfo state and a refresh function\n   */\n\n  function useNetInfoInstance(isPaused = false, configuration) {\n    const [networkInfoManager, setNetworkInfoManager] = (0, _react.useState)();\n    const [netInfo, setNetInfo] = (0, _react.useState)({\n      type: Types.NetInfoStateType.unknown,\n      isConnected: null,\n      isInternetReachable: null,\n      details: null\n    });\n    (0, _react.useEffect)(() => {\n      if (isPaused) {\n        return;\n      }\n      const config = Object.assign({}, _defaultConfiguration.default, configuration);\n      const state = new _state2.default(config);\n      setNetworkInfoManager(state);\n      state.add(setNetInfo);\n      return state.tearDown;\n    }, [isPaused, configuration]);\n    const refresh = (0, _react.useCallback)(() => {\n      if (networkInfoManager && !isRequestInProgress) {\n        isRequestInProgress = true;\n        networkInfoManager._fetchCurrentState().finally(() => {\n          isRequestInProgress = false;\n        });\n      }\n    }, [networkInfoManager]);\n    return {\n      netInfo,\n      refresh\n    };\n  }\n  var _default = exports.default = {\n    configure,\n    fetch,\n    refresh,\n    addEventListener,\n    useNetInfo,\n    useNetInfoInstance\n  };\n});","lineCount":211,"map":[[21,2,9,0],[21,6,9,0,"_react"],[21,12,9,0],[21,15,9,0,"require"],[21,22,9,0],[21,23,9,0,"_dependencyMap"],[21,37,9,0],[22,2,9,57],[22,6,9,57,"_Platform"],[22,15,9,57],[22,18,9,57,"_interopRequireDefault"],[22,40,9,57],[22,41,9,57,"require"],[22,48,9,57],[22,49,9,57,"_dependencyMap"],[22,63,9,57],[23,2,11,0],[23,6,11,0,"_defaultConfiguration"],[23,27,11,0],[23,30,11,0,"_interopRequireDefault"],[23,52,11,0],[23,53,11,0,"require"],[23,60,11,0],[23,61,11,0,"_dependencyMap"],[23,75,11,0],[24,2,12,0],[24,6,12,0,"_nativeInterface"],[24,22,12,0],[24,25,12,0,"_interopRequireDefault"],[24,47,12,0],[24,48,12,0,"require"],[24,55,12,0],[24,56,12,0,"_dependencyMap"],[24,70,12,0],[25,2,13,0],[25,6,13,0,"_state2"],[25,13,13,0],[25,16,13,0,"_interopRequireDefault"],[25,38,13,0],[25,39,13,0,"require"],[25,46,13,0],[25,47,13,0,"_dependencyMap"],[25,61,13,0],[26,2,14,0],[26,6,14,0,"Types"],[26,11,14,0],[26,14,14,0,"_interopRequireWildcard"],[26,37,14,0],[26,38,14,0,"require"],[26,45,14,0],[26,46,14,0,"_dependencyMap"],[26,60,14,0],[27,2,186,0,"Object"],[27,8,186,0],[27,9,186,0,"keys"],[27,13,186,0],[27,14,186,0,"Types"],[27,19,186,0],[27,21,186,0,"forEach"],[27,28,186,0],[27,39,186,0,"key"],[27,42,186,0],[28,4,186,0],[28,8,186,0,"key"],[28,11,186,0],[28,29,186,0,"key"],[28,32,186,0],[29,4,186,0],[29,8,186,0,"Object"],[29,14,186,0],[29,15,186,0,"prototype"],[29,24,186,0],[29,25,186,0,"hasOwnProperty"],[29,39,186,0],[29,40,186,0,"call"],[29,44,186,0],[29,45,186,0,"_exportNames"],[29,57,186,0],[29,59,186,0,"key"],[29,62,186,0],[30,4,186,0],[30,8,186,0,"key"],[30,11,186,0],[30,15,186,0,"exports"],[30,22,186,0],[30,26,186,0,"exports"],[30,33,186,0],[30,34,186,0,"key"],[30,37,186,0],[30,43,186,0,"Types"],[30,48,186,0],[30,49,186,0,"key"],[30,52,186,0],[31,4,186,0,"Object"],[31,10,186,0],[31,11,186,0,"defineProperty"],[31,25,186,0],[31,26,186,0,"exports"],[31,33,186,0],[31,35,186,0,"key"],[31,38,186,0],[32,6,186,0,"enumerable"],[32,16,186,0],[33,6,186,0,"get"],[33,9,186,0],[33,20,186,0,"get"],[33,21,186,0],[34,8,186,0],[34,15,186,0,"Types"],[34,20,186,0],[34,21,186,0,"key"],[34,24,186,0],[35,6,186,0],[36,4,186,0],[37,2,186,0],[38,2,186,33],[38,11,186,33,"_interopRequireWildcard"],[38,35,186,33,"e"],[38,36,186,33],[38,38,186,33,"t"],[38,39,186,33],[38,68,186,33,"WeakMap"],[38,75,186,33],[38,81,186,33,"r"],[38,82,186,33],[38,89,186,33,"WeakMap"],[38,96,186,33],[38,100,186,33,"n"],[38,101,186,33],[38,108,186,33,"WeakMap"],[38,115,186,33],[38,127,186,33,"_interopRequireWildcard"],[38,150,186,33],[38,162,186,33,"_interopRequireWildcard"],[38,163,186,33,"e"],[38,164,186,33],[38,166,186,33,"t"],[38,167,186,33],[38,176,186,33,"t"],[38,177,186,33],[38,181,186,33,"e"],[38,182,186,33],[38,186,186,33,"e"],[38,187,186,33],[38,188,186,33,"__esModule"],[38,198,186,33],[38,207,186,33,"e"],[38,208,186,33],[38,214,186,33,"o"],[38,215,186,33],[38,217,186,33,"i"],[38,218,186,33],[38,220,186,33,"f"],[38,221,186,33],[38,226,186,33,"__proto__"],[38,235,186,33],[38,243,186,33,"default"],[38,250,186,33],[38,252,186,33,"e"],[38,253,186,33],[38,270,186,33,"e"],[38,271,186,33],[38,294,186,33,"e"],[38,295,186,33],[38,320,186,33,"e"],[38,321,186,33],[38,330,186,33,"f"],[38,331,186,33],[38,337,186,33,"o"],[38,338,186,33],[38,341,186,33,"t"],[38,342,186,33],[38,345,186,33,"n"],[38,346,186,33],[38,349,186,33,"r"],[38,350,186,33],[38,358,186,33,"o"],[38,359,186,33],[38,360,186,33,"has"],[38,363,186,33],[38,364,186,33,"e"],[38,365,186,33],[38,375,186,33,"o"],[38,376,186,33],[38,377,186,33,"get"],[38,380,186,33],[38,381,186,33,"e"],[38,382,186,33],[38,385,186,33,"o"],[38,386,186,33],[38,387,186,33,"set"],[38,390,186,33],[38,391,186,33,"e"],[38,392,186,33],[38,394,186,33,"f"],[38,395,186,33],[38,411,186,33,"t"],[38,412,186,33],[38,416,186,33,"e"],[38,417,186,33],[38,433,186,33,"t"],[38,434,186,33],[38,441,186,33,"hasOwnProperty"],[38,455,186,33],[38,456,186,33,"call"],[38,460,186,33],[38,461,186,33,"e"],[38,462,186,33],[38,464,186,33,"t"],[38,465,186,33],[38,472,186,33,"i"],[38,473,186,33],[38,477,186,33,"o"],[38,478,186,33],[38,481,186,33,"Object"],[38,487,186,33],[38,488,186,33,"defineProperty"],[38,502,186,33],[38,507,186,33,"Object"],[38,513,186,33],[38,514,186,33,"getOwnPropertyDescriptor"],[38,538,186,33],[38,539,186,33,"e"],[38,540,186,33],[38,542,186,33,"t"],[38,543,186,33],[38,550,186,33,"i"],[38,551,186,33],[38,552,186,33,"get"],[38,555,186,33],[38,559,186,33,"i"],[38,560,186,33],[38,561,186,33,"set"],[38,564,186,33],[38,568,186,33,"o"],[38,569,186,33],[38,570,186,33,"f"],[38,571,186,33],[38,573,186,33,"t"],[38,574,186,33],[38,576,186,33,"i"],[38,577,186,33],[38,581,186,33,"f"],[38,582,186,33],[38,583,186,33,"t"],[38,584,186,33],[38,588,186,33,"e"],[38,589,186,33],[38,590,186,33,"t"],[38,591,186,33],[38,602,186,33,"f"],[38,603,186,33],[38,608,186,33,"e"],[38,609,186,33],[38,611,186,33,"t"],[38,612,186,33],[39,2,1,0],[40,0,2,0],[41,0,3,0],[42,0,4,0],[43,0,5,0],[44,0,6,0],[45,0,7,0],[46,0,8,0],[48,2,14,43],[50,2,16,0],[50,6,16,4,"_configuration"],[50,20,16,18],[50,23,16,21,"DEFAULT_CONFIGURATION"],[50,52,16,42],[50,53,16,43],[50,54,16,44],[52,2,18,0],[52,6,18,4,"_state"],[52,12,18,10],[52,15,18,13],[52,19,18,17],[53,2,20,0],[53,8,20,6,"createState"],[53,19,20,17],[53,22,20,20,"createState"],[53,23,20,20],[53,28,20,26],[54,4,21,2],[54,11,21,9],[54,15,21,13,"State"],[54,30,21,18],[54,31,21,19,"_configuration"],[54,45,21,33],[54,46,21,34],[55,2,22,0],[55,3,22,1],[55,4,22,2],[55,5,22,3],[57,2,25,0],[57,6,25,4,"isRequestInProgress"],[57,25,25,23],[57,28,25,26],[57,33,25,31],[58,2,26,0],[58,6,26,4,"requestQueue"],[58,18,26,16],[58,21,26,19],[58,23,26,21],[59,2,27,0],[60,0,28,0],[61,0,29,0],[62,0,30,0],[63,0,31,0],[64,0,32,0],[65,0,33,0],[67,2,35,7],[67,11,35,16,"configure"],[67,20,35,25,"configure"],[67,21,35,26,"configuration"],[67,34,35,39],[67,36,35,41],[68,4,36,2,"_configuration"],[68,18,36,16],[68,21,36,16,"Object"],[68,27,36,16],[68,28,36,16,"assign"],[68,34,36,16],[68,39,36,24,"DEFAULT_CONFIGURATION"],[68,68,36,45],[68,70,37,7,"configuration"],[68,83,37,20],[68,84,38,3],[69,4,40,2],[69,8,40,6,"_state"],[69,14,40,12],[69,16,40,14],[70,6,41,4,"_state"],[70,12,41,10],[70,13,41,11,"tearDown"],[70,21,41,19],[70,22,41,20],[70,23,41,21],[71,6,43,4,"_state"],[71,12,43,10],[71,15,43,13,"createState"],[71,26,43,24],[71,27,43,25],[71,28,43,26],[72,4,44,2],[73,4,46,2],[73,8,46,6,"Platform"],[73,25,46,14],[73,26,46,15,"OS"],[73,28,46,17],[73,33,46,22],[73,38,46,27],[73,40,46,29],[74,6,47,4,"NativeInterface"],[74,30,47,19],[74,31,47,20,"configure"],[74,40,47,29],[74,41,47,30,"configuration"],[74,54,47,43],[74,55,47,44],[75,4,48,2],[76,2,49,0],[77,2,50,0],[78,0,51,0],[79,0,52,0],[80,0,53,0],[81,0,54,0],[82,0,55,0],[83,0,56,0],[84,0,57,0],[86,2,59,7],[86,11,59,16,"fetch"],[86,16,59,21,"fetch"],[86,17,59,22,"requestedInterface"],[86,35,59,40],[86,37,59,42],[87,4,60,2],[87,8,60,6],[87,9,60,7,"_state"],[87,15,60,13],[87,17,60,15],[88,6,61,4,"_state"],[88,12,61,10],[88,15,61,13,"createState"],[88,26,61,24],[88,27,61,25],[88,28,61,26],[89,4,62,2],[90,4,64,2],[90,11,64,9,"_state"],[90,17,64,15],[90,18,64,16,"latest"],[90,24,64,22],[90,25,64,23,"requestedInterface"],[90,43,64,41],[90,44,64,42],[91,2,65,0],[92,2,66,0],[93,0,67,0],[94,0,68,0],[95,0,69,0],[96,0,70,0],[98,2,72,7],[98,11,72,16,"refresh"],[98,18,72,23,"refresh"],[98,19,72,23],[98,21,72,26],[99,4,73,2],[99,8,73,6],[99,9,73,7,"_state"],[99,15,73,13],[99,17,73,15],[100,6,74,4,"_state"],[100,12,74,10],[100,15,74,13,"createState"],[100,26,74,24],[100,27,74,25],[100,28,74,26],[101,4,75,2],[101,5,75,3],[101,6,75,4],[103,4,78,2],[103,8,78,6,"isRequestInProgress"],[103,27,78,25],[103,29,78,27],[104,6,79,4],[104,13,79,11],[104,17,79,15,"Promise"],[104,24,79,22],[104,25,79,23,"resolve"],[104,32,79,30],[104,36,79,34],[105,8,80,6,"requestQueue"],[105,20,80,18],[105,21,80,19,"push"],[105,25,80,23],[105,26,80,24,"resolve"],[105,33,80,31],[105,34,80,32],[106,6,81,4],[106,7,81,5],[106,8,81,6],[107,4,82,2],[108,4,84,2,"isRequestInProgress"],[108,23,84,21],[108,26,84,24],[108,30,84,28],[109,4,85,2],[109,11,85,9,"_state"],[109,17,85,15],[109,18,85,16,"_fetchCurrentState"],[109,36,85,34],[109,37,85,35],[109,38,85,36],[109,39,85,37,"then"],[109,43,85,41],[109,44,85,42,"result"],[109,50,85,48],[109,54,85,52],[110,6,86,4,"requestQueue"],[110,18,86,16],[110,19,86,17,"forEach"],[110,26,86,24],[110,27,86,25,"resolve"],[110,34,86,32],[110,38,86,36,"resolve"],[110,45,86,43],[110,46,86,44,"result"],[110,52,86,50],[110,53,86,51],[110,54,86,52],[111,6,87,4,"requestQueue"],[111,18,87,16],[111,21,87,19],[111,23,87,21],[112,6,88,4],[112,13,88,11,"result"],[112,19,88,17],[113,4,89,2],[113,5,89,3],[113,6,89,4],[113,7,89,5,"finally"],[113,14,89,12],[113,15,89,13],[113,21,89,19],[114,6,90,4,"isRequestInProgress"],[114,25,90,23],[114,28,90,26],[114,33,90,31],[115,4,91,2],[115,5,91,3],[115,6,91,4],[116,2,92,0],[117,2,93,0],[118,0,94,0],[119,0,95,0],[120,0,96,0],[121,0,97,0],[122,0,98,0],[123,0,99,0],[124,0,100,0],[125,0,101,0],[126,0,102,0],[127,0,103,0],[129,2,105,7],[129,11,105,16,"addEventListener"],[129,27,105,32,"addEventListener"],[129,28,105,33,"listener"],[129,36,105,41],[129,38,105,43],[130,4,106,2],[130,8,106,6],[130,9,106,7,"_state"],[130,15,106,13],[130,17,106,15],[131,6,107,4,"_state"],[131,12,107,10],[131,15,107,13,"createState"],[131,26,107,24],[131,27,107,25],[131,28,107,26],[132,4,108,2],[133,4,110,2,"_state"],[133,10,110,8],[133,11,110,9,"add"],[133,14,110,12],[133,15,110,13,"listener"],[133,23,110,21],[133,24,110,22],[134,4,112,2],[134,11,112,9],[134,17,112,15],[135,6,113,4,"_state"],[135,12,113,10],[135,16,113,14,"_state"],[135,22,113,20],[135,23,113,21,"remove"],[135,29,113,27],[135,30,113,28,"listener"],[135,38,113,36],[135,39,113,37],[136,4,114,2],[136,5,114,3],[137,2,115,0],[138,2,116,0],[139,0,117,0],[140,0,118,0],[141,0,119,0],[142,0,120,0],[143,0,121,0],[144,0,122,0],[146,2,124,7],[146,11,124,16,"useNetInfo"],[146,21,124,26,"useNetInfo"],[146,22,124,27,"configuration"],[146,35,124,40],[146,37,124,42],[147,4,125,2],[147,8,125,6,"configuration"],[147,21,125,19],[147,23,125,21],[148,6,126,4,"configure"],[148,15,126,13],[148,16,126,14,"configuration"],[148,29,126,27],[148,30,126,28],[149,4,127,2],[150,4,129,2],[150,10,129,8],[150,11,129,9,"netInfo"],[150,18,129,16],[150,20,129,18,"setNetInfo"],[150,30,129,28],[150,31,129,29],[150,34,129,32],[150,38,129,32,"useState"],[150,53,129,40],[150,55,129,41],[151,6,130,4,"type"],[151,10,130,8],[151,12,130,10,"Types"],[151,17,130,15],[151,18,130,16,"NetInfoStateType"],[151,34,130,32],[151,35,130,33,"unknown"],[151,42,130,40],[152,6,131,4,"isConnected"],[152,17,131,15],[152,19,131,17],[152,23,131,21],[153,6,132,4,"isInternetReachable"],[153,25,132,23],[153,27,132,25],[153,31,132,29],[154,6,133,4,"details"],[154,13,133,11],[154,15,133,13],[155,4,134,2],[155,5,134,3],[155,6,134,4],[156,4,135,2],[156,8,135,2,"useEffect"],[156,24,135,11],[156,26,135,12],[156,32,135,18],[157,6,136,4],[157,12,136,10,"unsubscribe"],[157,23,136,21],[157,26,136,24,"addEventListener"],[157,42,136,40],[157,43,136,41,"setNetInfo"],[157,53,136,51],[157,54,136,52],[158,6,137,4],[158,13,137,11],[158,19,137,17,"unsubscribe"],[158,30,137,28],[158,31,137,29],[158,32,137,30],[159,4,138,2],[159,5,138,3],[159,7,138,5],[159,9,138,7],[159,10,138,8],[160,4,139,2],[160,11,139,9,"netInfo"],[160,18,139,16],[161,2,140,0],[162,2,141,0],[163,0,142,0],[164,0,143,0],[165,0,144,0],[166,0,145,0],[167,0,146,0],[168,0,147,0],[169,0,148,0],[170,0,149,0],[172,2,151,7],[172,11,151,16,"useNetInfoInstance"],[172,29,151,34,"useNetInfoInstance"],[172,30,151,35,"isPaused"],[172,38,151,43],[172,41,151,46],[172,46,151,51],[172,48,151,53,"configuration"],[172,61,151,66],[172,63,151,68],[173,4,152,2],[173,10,152,8],[173,11,152,9,"networkInfoManager"],[173,29,152,27],[173,31,152,29,"setNetworkInfoManager"],[173,52,152,50],[173,53,152,51],[173,56,152,54],[173,60,152,54,"useState"],[173,75,152,62],[173,77,152,63],[173,78,152,64],[174,4,153,2],[174,10,153,8],[174,11,153,9,"netInfo"],[174,18,153,16],[174,20,153,18,"setNetInfo"],[174,30,153,28],[174,31,153,29],[174,34,153,32],[174,38,153,32,"useState"],[174,53,153,40],[174,55,153,41],[175,6,154,4,"type"],[175,10,154,8],[175,12,154,10,"Types"],[175,17,154,15],[175,18,154,16,"NetInfoStateType"],[175,34,154,32],[175,35,154,33,"unknown"],[175,42,154,40],[176,6,155,4,"isConnected"],[176,17,155,15],[176,19,155,17],[176,23,155,21],[177,6,156,4,"isInternetReachable"],[177,25,156,23],[177,27,156,25],[177,31,156,29],[178,6,157,4,"details"],[178,13,157,11],[178,15,157,13],[179,4,158,2],[179,5,158,3],[179,6,158,4],[180,4,159,2],[180,8,159,2,"useEffect"],[180,24,159,11],[180,26,159,12],[180,32,159,18],[181,6,160,4],[181,10,160,8,"isPaused"],[181,18,160,16],[181,20,160,18],[182,8,161,6],[183,6,162,4],[184,6,164,4],[184,12,164,10,"config"],[184,18,164,16],[184,21,164,16,"Object"],[184,27,164,16],[184,28,164,16,"assign"],[184,34,164,16],[184,39,164,24,"DEFAULT_CONFIGURATION"],[184,68,164,45],[184,70,165,9,"configuration"],[184,83,165,22],[184,84,166,5],[185,6,167,4],[185,12,167,10,"state"],[185,17,167,15],[185,20,167,18],[185,24,167,22,"State"],[185,39,167,27],[185,40,167,28,"config"],[185,46,167,34],[185,47,167,35],[186,6,168,4,"setNetworkInfoManager"],[186,27,168,25],[186,28,168,26,"state"],[186,33,168,31],[186,34,168,32],[187,6,169,4,"state"],[187,11,169,9],[187,12,169,10,"add"],[187,15,169,13],[187,16,169,14,"setNetInfo"],[187,26,169,24],[187,27,169,25],[188,6,170,4],[188,13,170,11,"state"],[188,18,170,16],[188,19,170,17,"tearDown"],[188,27,170,25],[189,4,171,2],[189,5,171,3],[189,7,171,5],[189,8,171,6,"isPaused"],[189,16,171,14],[189,18,171,16,"configuration"],[189,31,171,29],[189,32,171,30],[189,33,171,31],[190,4,172,2],[190,10,172,8,"refresh"],[190,17,172,15],[190,20,172,18],[190,24,172,18,"useCallback"],[190,42,172,29],[190,44,172,30],[190,50,172,36],[191,6,173,4],[191,10,173,8,"networkInfoManager"],[191,28,173,26],[191,32,173,30],[191,33,173,31,"isRequestInProgress"],[191,52,173,50],[191,54,173,52],[192,8,174,6,"isRequestInProgress"],[192,27,174,25],[192,30,174,28],[192,34,174,32],[193,8,176,6,"networkInfoManager"],[193,26,176,24],[193,27,176,25,"_fetchCurrentState"],[193,45,176,43],[193,46,176,44],[193,47,176,45],[193,48,176,46,"finally"],[193,55,176,53],[193,56,176,54],[193,62,176,60],[194,10,177,8,"isRequestInProgress"],[194,29,177,27],[194,32,177,30],[194,37,177,35],[195,8,178,6],[195,9,178,7],[195,10,178,8],[196,6,179,4],[197,4,180,2],[197,5,180,3],[197,7,180,5],[197,8,180,6,"networkInfoManager"],[197,26,180,24],[197,27,180,25],[197,28,180,26],[198,4,181,2],[198,11,181,9],[199,6,182,4,"netInfo"],[199,13,182,11],[200,6,183,4,"refresh"],[201,4,184,2],[201,5,184,3],[202,2,185,0],[203,2,185,1],[203,6,185,1,"_default"],[203,14,185,1],[203,17,185,1,"exports"],[203,24,185,1],[203,25,185,1,"default"],[203,32,185,1],[203,35,187,15],[204,4,188,2,"configure"],[204,13,188,11],[205,4,189,2,"fetch"],[205,9,189,7],[206,4,190,2,"refresh"],[206,11,190,9],[207,4,191,2,"addEventListener"],[207,20,191,18],[208,4,192,2,"useNetInfo"],[208,14,192,12],[209,4,193,2,"useNetInfoInstance"],[210,2,194,0],[210,3,194,1],[211,0,194,1],[211,3]],"functionMap":{"names":["<global>","createState","configure","fetch","refresh","Promise$argument_0","_state._fetchCurrentState.then$argument_0","requestQueue.forEach$argument_0","_state._fetchCurrentState.then._finally$argument_0","addEventListener","<anonymous>","useNetInfo","useEffect$argument_0","useNetInfoInstance","networkInfoManager._fetchCurrentState._finally$argument_0"],"mappings":"AAA;oBCmB;CDE;OEa;CFc;OGU;CHM;OIO;uBCO;KDE;0CEI;yBCC,0BD;GFG,UI;GJE;CJC;OSa;SCO;GDE;CTC;OWS;YCW;WFE,mBE;GDC;CXE;OaW;YDQ;GCY;8BTC;sDUI;OVE;GSE;CbK"}},"type":"js/module"}]}