{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"],"imports":1}},{"name":"./ranker","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":83,"index":83}}],"key":"BVu+olGeyATzqwbtiY2cJOygqoI=","exportNames":["*"],"imports":1}},{"name":"./bucketing","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":84},"end":{"line":2,"column":52,"index":136}}],"key":"JHsvy84rgwv/s6Qaxif2bfOkKRo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.fetchServerRank = fetchServerRank;\n  exports.selectRanker = selectRanker;\n  exports.applyColdStartBoost = applyColdStartBoost;\n  var _expoVirtualEnv = require(_dependencyMap[0], \"expo/virtual/env\");\n  var _ranker = require(_dependencyMap[1], \"./ranker\");\n  var _bucketing = require(_dependencyMap[2], \"./bucketing\");\n  /**\n   * Ranker Selection System with Server-Side Integration\n   * Handles client-side + server-side ranking with fallback\n   */\n\n  // Server-side ranking integration\n  async function fetchServerRank(userId, limit = 20) {\n    try {\n      const API_URL = _expoVirtualEnv.env.EXPO_PUBLIC_BACKEND_URL || 'http://localhost:8001';\n      const res = await fetch(`${API_URL}/api/rank`, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          limit\n        }),\n        timeout: 5000 // 5 second timeout\n      });\n      if (!res.ok) return null;\n      return await res.json(); // { algo, items:[{story_id,score,creator_id}], ttl }\n    } catch (error) {\n      console.warn('[ranker] Server ranking failed, falling back to client:', error);\n      return null;\n    }\n  }\n  async function selectRanker(stories, userId, context) {\n    // Feature flag check\n    if (!_ranker.RANKER_CONFIG.enabled) {\n      return {\n        stories,\n        algorithm: 'identity',\n        inCanary: false,\n        userId,\n        source: 'client'\n      };\n    }\n\n    // Check if server-side ranking is preferred\n    const useServerRanking = _expoVirtualEnv.env.EXPO_PUBLIC_USE_SERVER_RANKING === \"1\";\n    if (useServerRanking) {\n      // Try server-side ranking first\n      const serverResult = await fetchServerRank(userId, stories.length);\n      if (serverResult && serverResult.items) {\n        // Map server results back to story objects\n        const rankedStories = serverResult.items.map(item => stories.find(s => s.id === item.story_id)).filter(Boolean);\n\n        // Add any stories not returned by server (fallback)\n        const serverStoryIds = new Set(serverResult.items.map(item => item.story_id));\n        const remainingStories = stories.filter(s => !serverStoryIds.has(s.id));\n        return {\n          stories: [...rankedStories, ...remainingStories],\n          algorithm: serverResult.algo,\n          inCanary: serverResult.algo === 'ucb1',\n          userId,\n          source: 'server'\n        };\n      }\n\n      // Server failed, fall back to client-side\n      console.warn('[ranker] Server ranking unavailable, using client fallback');\n    }\n\n    // Client-side ranking (existing logic)\n    const assignment = (0, _bucketing.assignRankerTreatment)(userId);\n    let rankedStories;\n    const rankerContext = {\n      ...context,\n      userId,\n      timestamp: Date.now(),\n      businessConstraints: {\n        minCommissionRate: 0.07,\n        maxRepetition: 3,\n        freshnessBoost: 0.1,\n        diversityWeight: 0.2,\n        creatorTierWeights: {\n          gold: 0.1,\n          blue: 0.05,\n          grey: 0.02,\n          unverified: 0\n        }\n      }\n    };\n    switch (assignment.algorithm) {\n      case 'ucb1':\n        rankedStories = (0, _ranker.ucb1Ranker)(stories, rankerContext);\n        break;\n      case 'identity':\n      default:\n        rankedStories = (0, _ranker.ranker)(stories, rankerContext);\n        break;\n    }\n\n    // Apply minimum exposure protection\n    rankedStories = enforceMinExposure(rankedStories, 0.02);\n\n    // Emit assignment for analytics (if tracking available)\n    if (context?.track) {\n      context.track('ranker_assignment', {\n        userId,\n        algorithm: assignment.algorithm,\n        inCanary: assignment.inCanary,\n        source: 'client',\n        storyCount: stories.length,\n        timestamp: Date.now()\n      });\n    }\n    return {\n      stories: rankedStories,\n      algorithm: assignment.algorithm,\n      inCanary: assignment.inCanary,\n      userId,\n      source: 'client'\n    };\n  }\n\n  // Minimum exposure enforcement (anti-starvation)\n  function enforceMinExposure(stories, minPct = 0.02) {\n    if (stories.length <= 10) return stories; // Skip for small sets\n\n    const totalStories = stories.length;\n    const minExposure = Math.max(1, Math.floor(totalStories * minPct));\n\n    // Group by creator\n    const creatorGroups = new Map();\n    stories.forEach(story => {\n      const creatorId = story.creatorId;\n      if (!creatorGroups.has(creatorId)) {\n        creatorGroups.set(creatorId, []);\n      }\n      creatorGroups.get(creatorId).push(story);\n    });\n\n    // Ensure minimum representation for each creator\n    const balanced = [];\n    const remaining = [];\n    creatorGroups.forEach((creatorStories, creatorId) => {\n      const guaranteed = creatorStories.slice(0, Math.min(minExposure, creatorStories.length));\n      const excess = creatorStories.slice(guaranteed.length);\n      balanced.push(...guaranteed);\n      remaining.push(...excess);\n    });\n\n    // Add remaining stories by original rank\n    balanced.push(...remaining);\n    return balanced;\n  }\n\n  // Cold start handling for new stories\n  function applyColdStartBoost(stories) {\n    return stories.map(story => {\n      const engagement = story.engagement || {\n        impressions: 0,\n        ctas: 0,\n        purchases: 0,\n        views: 0\n      };\n\n      // Apply cold start prior if no engagement data\n      if (engagement.views === 0 && engagement.impressions === 0) {\n        return {\n          ...story,\n          metadata: {\n            ...story.metadata,\n            cold_start_prior: 0.02,\n            // 2% prior CTR\n            freshness_boost: 0.05 // Extra freshness for new content\n          }\n        };\n      }\n      return story;\n    });\n  }\n});","lineCount":187,"map":[[7,2,18,0,"exports"],[7,9,18,0],[7,10,18,0,"fetchServerRank"],[7,25,18,0],[7,28,18,0,"fetchServerRank"],[7,43,18,0],[8,2,36,0,"exports"],[8,9,36,0],[8,10,36,0,"selectRanker"],[8,22,36,0],[8,25,36,0,"selectRanker"],[8,37,36,0],[9,2,169,0,"exports"],[9,9,169,0],[9,10,169,0,"applyColdStartBoost"],[9,29,169,0],[9,32,169,0,"applyColdStartBoost"],[9,51,169,0],[10,2,187,1],[10,6,187,1,"_expoVirtualEnv"],[10,21,187,1],[10,24,187,1,"require"],[10,31,187,1],[10,32,187,1,"_dependencyMap"],[10,46,187,1],[11,2,1,0],[11,6,1,0,"_ranker"],[11,13,1,0],[11,16,1,0,"require"],[11,23,1,0],[11,24,1,0,"_dependencyMap"],[11,38,1,0],[12,2,2,0],[12,6,2,0,"_bucketing"],[12,16,2,0],[12,19,2,0,"require"],[12,26,2,0],[12,27,2,0,"_dependencyMap"],[12,41,2,0],[13,2,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[18,2,17,0],[19,2,18,7],[19,17,18,22,"fetchServerRank"],[19,32,18,37,"fetchServerRank"],[19,33,18,38,"userId"],[19,39,18,52],[19,41,18,54,"limit"],[19,46,18,59],[19,49,18,62],[19,51,18,64],[19,53,18,87],[20,4,19,2],[20,8,19,6],[21,6,20,4],[21,12,20,10,"API_URL"],[21,19,20,17],[21,22,20,20,"_expoVirtualEnv"],[21,37,20,20],[21,38,20,20,"env"],[21,41,20,20],[21,42,20,20,"EXPO_PUBLIC_BACKEND_URL"],[21,65,20,20],[21,69,20,59],[21,92,20,82],[22,6,21,4],[22,12,21,10,"res"],[22,15,21,13],[22,18,21,16],[22,24,21,22,"fetch"],[22,29,21,27],[22,30,21,28],[22,33,21,31,"API_URL"],[22,40,21,38],[22,51,21,49],[22,53,21,51],[23,8,22,6,"method"],[23,14,22,12],[23,16,22,14],[23,22,22,20],[24,8,23,6,"headers"],[24,15,23,13],[24,17,23,15],[25,10,23,17],[25,24,23,31],[25,26,23,33],[26,8,23,52],[26,9,23,53],[27,8,24,6,"body"],[27,12,24,10],[27,14,24,12,"JSON"],[27,18,24,16],[27,19,24,17,"stringify"],[27,28,24,26],[27,29,24,27],[28,10,24,29,"user_id"],[28,17,24,36],[28,19,24,38,"userId"],[28,25,24,44],[29,10,24,46,"limit"],[30,8,24,52],[30,9,24,53],[30,10,24,54],[31,8,25,6,"timeout"],[31,15,25,13],[31,17,25,15],[31,21,25,19],[31,22,25,20],[32,6,26,4],[32,7,26,5],[32,8,26,6],[33,6,28,4],[33,10,28,8],[33,11,28,9,"res"],[33,14,28,12],[33,15,28,13,"ok"],[33,17,28,15],[33,19,28,17],[33,26,28,24],[33,30,28,28],[34,6,29,4],[34,13,29,11],[34,19,29,17,"res"],[34,22,29,20],[34,23,29,21,"json"],[34,27,29,25],[34,28,29,26],[34,29,29,27],[34,30,29,28],[34,31,29,29],[35,4,30,2],[35,5,30,3],[35,6,30,4],[35,13,30,11,"error"],[35,18,30,16],[35,20,30,18],[36,6,31,4,"console"],[36,13,31,11],[36,14,31,12,"warn"],[36,18,31,16],[36,19,31,17],[36,76,31,74],[36,78,31,76,"error"],[36,83,31,81],[36,84,31,82],[37,6,32,4],[37,13,32,11],[37,17,32,15],[38,4,33,2],[39,2,34,0],[40,2,36,7],[40,17,36,22,"selectRanker"],[40,29,36,34,"selectRanker"],[40,30,36,35,"stories"],[40,37,36,51],[40,39,36,53,"userId"],[40,45,36,67],[40,47,36,69,"context"],[40,54,36,92],[40,56,36,120],[41,4,37,2],[42,4,38,2],[42,8,38,6],[42,9,38,7,"RANKER_CONFIG"],[42,16,38,20],[42,17,38,20,"RANKER_CONFIG"],[42,30,38,20],[42,31,38,21,"enabled"],[42,38,38,28],[42,40,38,30],[43,6,39,4],[43,13,39,11],[44,8,40,6,"stories"],[44,15,40,13],[45,8,41,6,"algorithm"],[45,17,41,15],[45,19,41,17],[45,29,41,27],[46,8,42,6,"inCanary"],[46,16,42,14],[46,18,42,16],[46,23,42,21],[47,8,43,6,"userId"],[47,14,43,12],[48,8,44,6,"source"],[48,14,44,12],[48,16,44,14],[49,6,45,4],[49,7,45,5],[50,4,46,2],[52,4,48,2],[53,4,49,2],[53,10,49,8,"useServerRanking"],[53,26,49,24],[53,29,49,27,"_expoVirtualEnv"],[53,44,49,27],[53,45,49,27,"env"],[53,48,49,27],[53,49,49,27,"EXPO_PUBLIC_USE_SERVER_RANKING"],[53,79,49,27],[53,84,49,74],[53,87,49,77],[54,4,51,2],[54,8,51,6,"useServerRanking"],[54,24,51,22],[54,26,51,24],[55,6,52,4],[56,6,53,4],[56,12,53,10,"serverResult"],[56,24,53,22],[56,27,53,25],[56,33,53,31,"fetchServerRank"],[56,48,53,46],[56,49,53,47,"userId"],[56,55,53,53],[56,57,53,55,"stories"],[56,64,53,62],[56,65,53,63,"length"],[56,71,53,69],[56,72,53,70],[57,6,54,4],[57,10,54,8,"serverResult"],[57,22,54,20],[57,26,54,24,"serverResult"],[57,38,54,36],[57,39,54,37,"items"],[57,44,54,42],[57,46,54,44],[58,8,55,6],[59,8,56,6],[59,14,56,12,"rankedStories"],[59,27,56,25],[59,30,56,28,"serverResult"],[59,42,56,40],[59,43,56,41,"items"],[59,48,56,46],[59,49,57,9,"map"],[59,52,57,12],[59,53,57,14,"item"],[59,57,57,23],[59,61,57,28,"stories"],[59,68,57,35],[59,69,57,36,"find"],[59,73,57,40],[59,74,57,41,"s"],[59,75,57,42],[59,79,57,46,"s"],[59,80,57,47],[59,81,57,48,"id"],[59,83,57,50],[59,88,57,55,"item"],[59,92,57,59],[59,93,57,60,"story_id"],[59,101,57,68],[59,102,57,69],[59,103,57,70],[59,104,58,9,"filter"],[59,110,58,15],[59,111,58,16,"Boolean"],[59,118,58,23],[59,119,58,35],[61,8,60,6],[62,8,61,6],[62,14,61,12,"serverStoryIds"],[62,28,61,26],[62,31,61,29],[62,35,61,33,"Set"],[62,38,61,36],[62,39,61,37,"serverResult"],[62,51,61,49],[62,52,61,50,"items"],[62,57,61,55],[62,58,61,56,"map"],[62,61,61,59],[62,62,61,61,"item"],[62,66,61,70],[62,70,61,75,"item"],[62,74,61,79],[62,75,61,80,"story_id"],[62,83,61,88],[62,84,61,89],[62,85,61,90],[63,8,62,6],[63,14,62,12,"remainingStories"],[63,30,62,28],[63,33,62,31,"stories"],[63,40,62,38],[63,41,62,39,"filter"],[63,47,62,45],[63,48,62,46,"s"],[63,49,62,47],[63,53,62,51],[63,54,62,52,"serverStoryIds"],[63,68,62,66],[63,69,62,67,"has"],[63,72,62,70],[63,73,62,71,"s"],[63,74,62,72],[63,75,62,73,"id"],[63,77,62,75],[63,78,62,76],[63,79,62,77],[64,8,64,6],[64,15,64,13],[65,10,65,8,"stories"],[65,17,65,15],[65,19,65,17],[65,20,65,18],[65,23,65,21,"rankedStories"],[65,36,65,34],[65,38,65,36],[65,41,65,39,"remainingStories"],[65,57,65,55],[65,58,65,56],[66,10,66,8,"algorithm"],[66,19,66,17],[66,21,66,19,"serverResult"],[66,33,66,31],[66,34,66,32,"algo"],[66,38,66,59],[67,10,67,8,"inCanary"],[67,18,67,16],[67,20,67,18,"serverResult"],[67,32,67,30],[67,33,67,31,"algo"],[67,37,67,35],[67,42,67,40],[67,48,67,46],[68,10,68,8,"userId"],[68,16,68,14],[69,10,69,8,"source"],[69,16,69,14],[69,18,69,16],[70,8,70,6],[70,9,70,7],[71,6,71,4],[73,6,73,4],[74,6,74,4,"console"],[74,13,74,11],[74,14,74,12,"warn"],[74,18,74,16],[74,19,74,17],[74,79,74,77],[74,80,74,78],[75,4,75,2],[77,4,77,2],[78,4,78,2],[78,10,78,8,"assignment"],[78,20,78,18],[78,23,78,21],[78,27,78,21,"assignRankerTreatment"],[78,37,78,42],[78,38,78,42,"assignRankerTreatment"],[78,59,78,42],[78,61,78,43,"userId"],[78,67,78,49],[78,68,78,50],[79,4,80,2],[79,8,80,6,"rankedStories"],[79,21,80,28],[80,4,81,2],[80,10,81,8,"rankerContext"],[80,23,81,21],[80,26,81,24],[81,6,82,4],[81,9,82,7,"context"],[81,16,82,14],[82,6,83,4,"userId"],[82,12,83,10],[83,6,84,4,"timestamp"],[83,15,84,13],[83,17,84,15,"Date"],[83,21,84,19],[83,22,84,20,"now"],[83,25,84,23],[83,26,84,24],[83,27,84,25],[84,6,85,4,"businessConstraints"],[84,25,85,23],[84,27,85,25],[85,8,86,6,"minCommissionRate"],[85,25,86,23],[85,27,86,25],[85,31,86,29],[86,8,87,6,"maxRepetition"],[86,21,87,19],[86,23,87,21],[86,24,87,22],[87,8,88,6,"freshnessBoost"],[87,22,88,20],[87,24,88,22],[87,27,88,25],[88,8,89,6,"diversityWeight"],[88,23,89,21],[88,25,89,23],[88,28,89,26],[89,8,90,6,"creatorTierWeights"],[89,26,90,24],[89,28,90,26],[90,10,91,8,"gold"],[90,14,91,12],[90,16,91,14],[90,19,91,17],[91,10,92,8,"blue"],[91,14,92,12],[91,16,92,14],[91,20,92,18],[92,10,93,8,"grey"],[92,14,93,12],[92,16,93,14],[92,20,93,18],[93,10,94,8,"unverified"],[93,20,94,18],[93,22,94,20],[94,8,95,6],[95,6,96,4],[96,4,97,2],[96,5,97,3],[97,4,99,2],[97,12,99,10,"assignment"],[97,22,99,20],[97,23,99,21,"algorithm"],[97,32,99,30],[98,6,100,4],[98,11,100,9],[98,17,100,15],[99,8,101,6,"rankedStories"],[99,21,101,19],[99,24,101,22],[99,28,101,22,"ucb1Ranker"],[99,35,101,32],[99,36,101,32,"ucb1Ranker"],[99,46,101,32],[99,48,101,33,"stories"],[99,55,101,40],[99,57,101,42,"rankerContext"],[99,70,101,55],[99,71,101,56],[100,8,102,6],[101,6,103,4],[101,11,103,9],[101,21,103,19],[102,6,104,4],[103,8,105,6,"rankedStories"],[103,21,105,19],[103,24,105,22],[103,28,105,22,"ranker"],[103,35,105,28],[103,36,105,28,"ranker"],[103,42,105,28],[103,44,105,29,"stories"],[103,51,105,36],[103,53,105,38,"rankerContext"],[103,66,105,51],[103,67,105,52],[104,8,106,6],[105,4,107,2],[107,4,109,2],[108,4,110,2,"rankedStories"],[108,17,110,15],[108,20,110,18,"enforceMinExposure"],[108,38,110,36],[108,39,110,37,"rankedStories"],[108,52,110,50],[108,54,110,52],[108,58,110,56],[108,59,110,57],[110,4,112,2],[111,4,113,2],[111,8,113,6,"context"],[111,15,113,13],[111,17,113,15,"track"],[111,22,113,20],[111,24,113,22],[112,6,114,4,"context"],[112,13,114,11],[112,14,114,12,"track"],[112,19,114,17],[112,20,114,18],[112,39,114,37],[112,41,114,39],[113,8,115,6,"userId"],[113,14,115,12],[114,8,116,6,"algorithm"],[114,17,116,15],[114,19,116,17,"assignment"],[114,29,116,27],[114,30,116,28,"algorithm"],[114,39,116,37],[115,8,117,6,"inCanary"],[115,16,117,14],[115,18,117,16,"assignment"],[115,28,117,26],[115,29,117,27,"inCanary"],[115,37,117,35],[116,8,118,6,"source"],[116,14,118,12],[116,16,118,14],[116,24,118,22],[117,8,119,6,"storyCount"],[117,18,119,16],[117,20,119,18,"stories"],[117,27,119,25],[117,28,119,26,"length"],[117,34,119,32],[118,8,120,6,"timestamp"],[118,17,120,15],[118,19,120,17,"Date"],[118,23,120,21],[118,24,120,22,"now"],[118,27,120,25],[118,28,120,26],[119,6,121,4],[119,7,121,5],[119,8,121,6],[120,4,122,2],[121,4,124,2],[121,11,124,9],[122,6,125,4,"stories"],[122,13,125,11],[122,15,125,13,"rankedStories"],[122,28,125,26],[123,6,126,4,"algorithm"],[123,15,126,13],[123,17,126,15,"assignment"],[123,27,126,25],[123,28,126,26,"algorithm"],[123,37,126,35],[124,6,127,4,"inCanary"],[124,14,127,12],[124,16,127,14,"assignment"],[124,26,127,24],[124,27,127,25,"inCanary"],[124,35,127,33],[125,6,128,4,"userId"],[125,12,128,10],[126,6,129,4,"source"],[126,12,129,10],[126,14,129,12],[127,4,130,2],[127,5,130,3],[128,2,131,0],[130,2,133,0],[131,2,134,0],[131,11,134,9,"enforceMinExposure"],[131,29,134,27,"enforceMinExposure"],[131,30,134,28,"stories"],[131,37,134,44],[131,39,134,46,"minPct"],[131,45,134,52],[131,48,134,55],[131,52,134,59],[131,54,134,70],[132,4,135,2],[132,8,135,6,"stories"],[132,15,135,13],[132,16,135,14,"length"],[132,22,135,20],[132,26,135,24],[132,28,135,26],[132,30,135,28],[132,37,135,35,"stories"],[132,44,135,42],[132,45,135,43],[132,46,135,44],[134,4,137,2],[134,10,137,8,"totalStories"],[134,22,137,20],[134,25,137,23,"stories"],[134,32,137,30],[134,33,137,31,"length"],[134,39,137,37],[135,4,138,2],[135,10,138,8,"minExposure"],[135,21,138,19],[135,24,138,22,"Math"],[135,28,138,26],[135,29,138,27,"max"],[135,32,138,30],[135,33,138,31],[135,34,138,32],[135,36,138,34,"Math"],[135,40,138,38],[135,41,138,39,"floor"],[135,46,138,44],[135,47,138,45,"totalStories"],[135,59,138,57],[135,62,138,60,"minPct"],[135,68,138,66],[135,69,138,67],[135,70,138,68],[137,4,140,2],[138,4,141,2],[138,10,141,8,"creatorGroups"],[138,23,141,21],[138,26,141,24],[138,30,141,28,"Map"],[138,33,141,31],[138,34,141,49],[138,35,141,50],[139,4,142,2,"stories"],[139,11,142,9],[139,12,142,10,"forEach"],[139,19,142,17],[139,20,142,18,"story"],[139,25,142,23],[139,29,142,27],[140,6,143,4],[140,12,143,10,"creatorId"],[140,21,143,19],[140,24,143,22,"story"],[140,29,143,27],[140,30,143,28,"creatorId"],[140,39,143,37],[141,6,144,4],[141,10,144,8],[141,11,144,9,"creatorGroups"],[141,24,144,22],[141,25,144,23,"has"],[141,28,144,26],[141,29,144,27,"creatorId"],[141,38,144,36],[141,39,144,37],[141,41,144,39],[142,8,145,6,"creatorGroups"],[142,21,145,19],[142,22,145,20,"set"],[142,25,145,23],[142,26,145,24,"creatorId"],[142,35,145,33],[142,37,145,35],[142,39,145,37],[142,40,145,38],[143,6,146,4],[144,6,147,4,"creatorGroups"],[144,19,147,17],[144,20,147,18,"get"],[144,23,147,21],[144,24,147,22,"creatorId"],[144,33,147,31],[144,34,147,32],[144,35,147,34,"push"],[144,39,147,38],[144,40,147,39,"story"],[144,45,147,44],[144,46,147,45],[145,4,148,2],[145,5,148,3],[145,6,148,4],[147,4,150,2],[148,4,151,2],[148,10,151,8,"balanced"],[148,18,151,25],[148,21,151,28],[148,23,151,30],[149,4,152,2],[149,10,152,8,"remaining"],[149,19,152,26],[149,22,152,29],[149,24,152,31],[150,4,154,2,"creatorGroups"],[150,17,154,15],[150,18,154,16,"forEach"],[150,25,154,23],[150,26,154,24],[150,27,154,25,"creatorStories"],[150,41,154,39],[150,43,154,41,"creatorId"],[150,52,154,50],[150,57,154,55],[151,6,155,4],[151,12,155,10,"guaranteed"],[151,22,155,20],[151,25,155,23,"creatorStories"],[151,39,155,37],[151,40,155,38,"slice"],[151,45,155,43],[151,46,155,44],[151,47,155,45],[151,49,155,47,"Math"],[151,53,155,51],[151,54,155,52,"min"],[151,57,155,55],[151,58,155,56,"minExposure"],[151,69,155,67],[151,71,155,69,"creatorStories"],[151,85,155,83],[151,86,155,84,"length"],[151,92,155,90],[151,93,155,91],[151,94,155,92],[152,6,156,4],[152,12,156,10,"excess"],[152,18,156,16],[152,21,156,19,"creatorStories"],[152,35,156,33],[152,36,156,34,"slice"],[152,41,156,39],[152,42,156,40,"guaranteed"],[152,52,156,50],[152,53,156,51,"length"],[152,59,156,57],[152,60,156,58],[153,6,158,4,"balanced"],[153,14,158,12],[153,15,158,13,"push"],[153,19,158,17],[153,20,158,18],[153,23,158,21,"guaranteed"],[153,33,158,31],[153,34,158,32],[154,6,159,4,"remaining"],[154,15,159,13],[154,16,159,14,"push"],[154,20,159,18],[154,21,159,19],[154,24,159,22,"excess"],[154,30,159,28],[154,31,159,29],[155,4,160,2],[155,5,160,3],[155,6,160,4],[157,4,162,2],[158,4,163,2,"balanced"],[158,12,163,10],[158,13,163,11,"push"],[158,17,163,15],[158,18,163,16],[158,21,163,19,"remaining"],[158,30,163,28],[158,31,163,29],[159,4,165,2],[159,11,165,9,"balanced"],[159,19,165,17],[160,2,166,0],[162,2,168,0],[163,2,169,7],[163,11,169,16,"applyColdStartBoost"],[163,30,169,35,"applyColdStartBoost"],[163,31,169,36,"stories"],[163,38,169,52],[163,40,169,63],[164,4,170,2],[164,11,170,9,"stories"],[164,18,170,16],[164,19,170,17,"map"],[164,22,170,20],[164,23,170,21,"story"],[164,28,170,26],[164,32,170,30],[165,6,171,4],[165,12,171,10,"engagement"],[165,22,171,20],[165,25,171,23,"story"],[165,30,171,28],[165,31,171,29,"engagement"],[165,41,171,39],[165,45,171,43],[166,8,171,45,"impressions"],[166,19,171,56],[166,21,171,58],[166,22,171,59],[167,8,171,61,"ctas"],[167,12,171,65],[167,14,171,67],[167,15,171,68],[168,8,171,70,"purchases"],[168,17,171,79],[168,19,171,81],[168,20,171,82],[169,8,171,84,"views"],[169,13,171,89],[169,15,171,91],[170,6,171,93],[170,7,171,94],[172,6,173,4],[173,6,174,4],[173,10,174,8,"engagement"],[173,20,174,18],[173,21,174,19,"views"],[173,26,174,24],[173,31,174,29],[173,32,174,30],[173,36,174,34,"engagement"],[173,46,174,44],[173,47,174,45,"impressions"],[173,58,174,56],[173,63,174,61],[173,64,174,62],[173,66,174,64],[174,8,175,6],[174,15,175,13],[175,10,176,8],[175,13,176,11,"story"],[175,18,176,16],[176,10,177,8,"metadata"],[176,18,177,16],[176,20,177,18],[177,12,178,10],[177,15,178,13,"story"],[177,20,178,18],[177,21,178,19,"metadata"],[177,29,178,27],[178,12,179,10,"cold_start_prior"],[178,28,179,26],[178,30,179,28],[178,34,179,32],[179,12,179,34],[180,12,180,10,"freshness_boost"],[180,27,180,25],[180,29,180,27],[180,33,180,31],[180,34,180,34],[181,10,181,8],[182,8,182,6],[182,9,182,7],[183,6,183,4],[184,6,185,4],[184,13,185,11,"story"],[184,18,185,16],[185,4,186,2],[185,5,186,3],[185,6,186,4],[186,2,187,0],[187,0,187,1],[187,3]],"functionMap":{"names":["<global>","fetchServerRank","selectRanker","serverResult.items.map$argument_0","stories.find$argument_0","stories.filter$argument_0","enforceMinExposure","stories.forEach$argument_0","creatorGroups.forEach$argument_0","applyColdStartBoost","stories.map$argument_0"],"mappings":"AAA;OCiB;CDgB;OEE;aCqB,4BC,2BD,CD;4DCI,4BD;8CGC,8BH;CFqE;AMG;kBCQ;GDM;wBEM;GFM;CNM;OSG;qBCC;GDgB"},"hasCjsExports":false},"type":"js/module"}]}